// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: api_keys.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type CreateAPIKeyParams struct {
	UserID            uuid.UUID
	PublicKey         string
	SecretKey         string
	CanWithdrawal     bool
	CanProcessPayment bool
	CreatedBy         uuid.UUID
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey, 
		arg.UserID,
		arg.PublicKey,
		arg.SecretKey,
		arg.CanWithdrawal,
		arg.CanProcessPayment,
		arg.CreatedBy,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, user_id, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, created_by
FROM api_keys
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAPIKey(ctx context.Context, id uuid.UUID) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKey, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getAPIKeyByPublicKey = `-- name: GetAPIKeyByPublicKey :one
SELECT id, user_id, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, created_by
FROM api_keys
WHERE public_key = $1 LIMIT 1
`

func (q *Queries) GetAPIKeyByPublicKey(ctx context.Context, publicKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByPublicKey, publicKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getAPIKeyBySecretKey = `-- name: GetAPIKeyBySecretKey :one
SELECT id, user_id, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, created_by
FROM api_keys
WHERE secret_key = $1 LIMIT 1
`

func (q *Queries) GetAPIKeyBySecretKey(ctx context.Context, secretKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyBySecretKey, secretKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getAPIKeysByUserID = `-- name: GetAPIKeysByUserID :many
SELECT id, user_id, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, created_by
FROM api_keys
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAPIKeysByUserID(ctx context.Context, userID uuid.UUID) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, getAPIKeysByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PublicKey,
			&i.SecretKey,
			&i.CanWithdrawal,
			&i.CanProcessPayment,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE api_keys
SET
    can_withdrawal = $2,
    can_process_payment = $3
WHERE id = $1
RETURNING id, user_id, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, created_by
`

type UpdateAPIKeyParams struct {
	ID                uuid.UUID
	CanWithdrawal     bool
	CanProcessPayment bool
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, updateAPIKey, arg.ID, arg.CanWithdrawal, arg.CanProcessPayment)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const rotateAPIKeySecret = `-- name: RotateAPIKeySecret :one
UPDATE api_keys
SET
    secret_key = $2
WHERE id = $1
RETURNING id, user_id, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, created_by
`

type RotateAPIKeySecretParams struct {
	ID        uuid.UUID
	SecretKey string
}

func (q *Queries) RotateAPIKeySecret(ctx context.Context, arg RotateAPIKeySecretParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, rotateAPIKeySecret, arg.ID, arg.SecretKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKey, id)
	return err
}

// ApiKey represents an API key from the database
type ApiKey struct {
	ID                uuid.UUID
	UserID            uuid.UUID
	PublicKey         string
	SecretKey         string
	CanWithdrawal     bool
	CanProcessPayment bool
	CreatedAt         time.Time
	UpdatedAt         time.Time
	CreatedBy         uuid.UUID
}

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
    user_id,
    public_key,
    secret_key,
    can_withdrawal,
    can_process_payment,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, created_by
` 
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package commission

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createCommissionTier = `-- name: CreateCommissionTier :one
INSERT INTO admin.commission_tiers (min_amount, max_amount, percent, cent)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at
`

type CreateCommissionTierParams struct {
	MinAmount string `json:"min_amount"`
	MaxAmount string `json:"max_amount"`
	Percent   string `json:"percent"`
	Cent      string `json:"cent"`
}

type CreateCommissionTierRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateCommissionTier(ctx context.Context, arg CreateCommissionTierParams) (CreateCommissionTierRow, error) {
	row := q.queryRow(ctx, q.createCommissionTierStmt, createCommissionTier,
		arg.MinAmount,
		arg.MaxAmount,
		arg.Percent,
		arg.Cent,
	)
	var i CreateCommissionTierRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteCommissionTier = `-- name: DeleteCommissionTier :exec
DELETE FROM admin.commission_tiers
WHERE id = $1
`

func (q *Queries) DeleteCommissionTier(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCommissionTierStmt, deleteCommissionTier, id)
	return err
}

const getCommissionTierForAmount = `-- name: GetCommissionTierForAmount :one
SELECT id, min_amount, max_amount, percent, cent, created_at, updated_at
FROM admin.commission_tiers
WHERE min_amount <= $1 AND max_amount > $1
ORDER BY min_amount DESC
LIMIT 1
`

func (q *Queries) GetCommissionTierForAmount(ctx context.Context, minAmount string) (AdminCommissionTier, error) {
	row := q.queryRow(ctx, q.getCommissionTierForAmountStmt, getCommissionTierForAmount, minAmount)
	var i AdminCommissionTier
	err := row.Scan(
		&i.ID,
		&i.MinAmount,
		&i.MaxAmount,
		&i.Percent,
		&i.Cent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDefaultCommission = `-- name: GetDefaultCommission :one
SELECT value::text
FROM admin.settings
WHERE key = 'default_commission'
`

func (q *Queries) GetDefaultCommission(ctx context.Context) (string, error) {
	row := q.queryRow(ctx, q.getDefaultCommissionStmt, getDefaultCommission)
	var value string
	err := row.Scan(&value)
	return value, err
}

const getMerchantCommission = `-- name: GetMerchantCommission :one
SELECT commission_active, commission_percent, commission_cent
FROM merchants.merchants
WHERE id = $1
`

type GetMerchantCommissionRow struct {
	CommissionActive  bool           `json:"commission_active"`
	CommissionPercent sql.NullString `json:"commission_percent"`
	CommissionCent    sql.NullString `json:"commission_cent"`
}

func (q *Queries) GetMerchantCommission(ctx context.Context, id uuid.UUID) (GetMerchantCommissionRow, error) {
	row := q.queryRow(ctx, q.getMerchantCommissionStmt, getMerchantCommission, id)
	var i GetMerchantCommissionRow
	err := row.Scan(&i.CommissionActive, &i.CommissionPercent, &i.CommissionCent)
	return i, err
}

const listCommissionTiers = `-- name: ListCommissionTiers :many
SELECT id, min_amount, max_amount, percent, cent, created_at, updated_at
FROM admin.commission_tiers
ORDER BY min_amount ASC
`

func (q *Queries) ListCommissionTiers(ctx context.Context) ([]AdminCommissionTier, error) {
	rows, err := q.query(ctx, q.listCommissionTiersStmt, listCommissionTiers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AdminCommissionTier{}
	for rows.Next() {
		var i AdminCommissionTier
		if err := rows.Scan(
			&i.ID,
			&i.MinAmount,
			&i.MaxAmount,
			&i.Percent,
			&i.Cent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommissionTier = `-- name: UpdateCommissionTier :exec
UPDATE admin.commission_tiers
SET min_amount = $1,
    max_amount = $2,
    percent = $3,
    cent = $4,
    updated_at = NOW()
WHERE id = $5
`

type UpdateCommissionTierParams struct {
	MinAmount string    `json:"min_amount"`
	MaxAmount string    `json:"max_amount"`
	Percent   string    `json:"percent"`
	Cent      string    `json:"cent"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCommissionTier(ctx context.Context, arg UpdateCommissionTierParams) error {
	_, err := q.exec(ctx, q.updateCommissionTierStmt, updateCommissionTier,
		arg.MinAmount,
		arg.MaxAmount,
		arg.Percent,
		arg.Cent,
		arg.ID,
	)
	return err
}

const updateDefaultCommission = `-- name: UpdateDefaultCommission :exec
UPDATE admin.settings
SET value = $1::jsonb,
    updated_at = NOW()
WHERE key = 'default_commission'
`

func (q *Queries) UpdateDefaultCommission(ctx context.Context, dollar_1 json.RawMessage) error {
	_, err := q.exec(ctx, q.updateDefaultCommissionStmt, updateDefaultCommission, dollar_1)
	return err
}

const updateMerchantCommission = `-- name: UpdateMerchantCommission :exec
UPDATE merchants.merchants
SET commission_active = $1,
    commission_percent = $2,
    commission_cent = $3,
    updated_at = NOW()
WHERE id = $4
`

type UpdateMerchantCommissionParams struct {
	CommissionActive  bool           `json:"commission_active"`
	CommissionPercent sql.NullString `json:"commission_percent"`
	CommissionCent    sql.NullString `json:"commission_cent"`
	ID                uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateMerchantCommission(ctx context.Context, arg UpdateMerchantCommissionParams) error {
	_, err := q.exec(ctx, q.updateMerchantCommissionStmt, updateMerchantCommission,
		arg.CommissionActive,
		arg.CommissionPercent,
		arg.CommissionCent,
		arg.ID,
	)
	return err
}

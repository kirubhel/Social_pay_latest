// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package commission

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCommissionTierStmt, err = db.PrepareContext(ctx, createCommissionTier); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCommissionTier: %w", err)
	}
	if q.deleteCommissionTierStmt, err = db.PrepareContext(ctx, deleteCommissionTier); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCommissionTier: %w", err)
	}
	if q.getCommissionTierForAmountStmt, err = db.PrepareContext(ctx, getCommissionTierForAmount); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommissionTierForAmount: %w", err)
	}
	if q.getDefaultCommissionStmt, err = db.PrepareContext(ctx, getDefaultCommission); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultCommission: %w", err)
	}
	if q.getMerchantCommissionStmt, err = db.PrepareContext(ctx, getMerchantCommission); err != nil {
		return nil, fmt.Errorf("error preparing query GetMerchantCommission: %w", err)
	}
	if q.listCommissionTiersStmt, err = db.PrepareContext(ctx, listCommissionTiers); err != nil {
		return nil, fmt.Errorf("error preparing query ListCommissionTiers: %w", err)
	}
	if q.updateCommissionTierStmt, err = db.PrepareContext(ctx, updateCommissionTier); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCommissionTier: %w", err)
	}
	if q.updateDefaultCommissionStmt, err = db.PrepareContext(ctx, updateDefaultCommission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDefaultCommission: %w", err)
	}
	if q.updateMerchantCommissionStmt, err = db.PrepareContext(ctx, updateMerchantCommission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMerchantCommission: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCommissionTierStmt != nil {
		if cerr := q.createCommissionTierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCommissionTierStmt: %w", cerr)
		}
	}
	if q.deleteCommissionTierStmt != nil {
		if cerr := q.deleteCommissionTierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommissionTierStmt: %w", cerr)
		}
	}
	if q.getCommissionTierForAmountStmt != nil {
		if cerr := q.getCommissionTierForAmountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommissionTierForAmountStmt: %w", cerr)
		}
	}
	if q.getDefaultCommissionStmt != nil {
		if cerr := q.getDefaultCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultCommissionStmt: %w", cerr)
		}
	}
	if q.getMerchantCommissionStmt != nil {
		if cerr := q.getMerchantCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMerchantCommissionStmt: %w", cerr)
		}
	}
	if q.listCommissionTiersStmt != nil {
		if cerr := q.listCommissionTiersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCommissionTiersStmt: %w", cerr)
		}
	}
	if q.updateCommissionTierStmt != nil {
		if cerr := q.updateCommissionTierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCommissionTierStmt: %w", cerr)
		}
	}
	if q.updateDefaultCommissionStmt != nil {
		if cerr := q.updateDefaultCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDefaultCommissionStmt: %w", cerr)
		}
	}
	if q.updateMerchantCommissionStmt != nil {
		if cerr := q.updateMerchantCommissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMerchantCommissionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createCommissionTierStmt       *sql.Stmt
	deleteCommissionTierStmt       *sql.Stmt
	getCommissionTierForAmountStmt *sql.Stmt
	getDefaultCommissionStmt       *sql.Stmt
	getMerchantCommissionStmt      *sql.Stmt
	listCommissionTiersStmt        *sql.Stmt
	updateCommissionTierStmt       *sql.Stmt
	updateDefaultCommissionStmt    *sql.Stmt
	updateMerchantCommissionStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createCommissionTierStmt:       q.createCommissionTierStmt,
		deleteCommissionTierStmt:       q.deleteCommissionTierStmt,
		getCommissionTierForAmountStmt: q.getCommissionTierForAmountStmt,
		getDefaultCommissionStmt:       q.getDefaultCommissionStmt,
		getMerchantCommissionStmt:      q.getMerchantCommissionStmt,
		listCommissionTiersStmt:        q.listCommissionTiersStmt,
		updateCommissionTierStmt:       q.updateCommissionTierStmt,
		updateDefaultCommissionStmt:    q.updateDefaultCommissionStmt,
		updateMerchantCommissionStmt:   q.updateMerchantCommissionStmt,
	}
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const getMerchant = `-- name: GetMerchant :one

SELECT id, user_id, legal_name, trading_name, business_registration_number, tax_identification_number, business_type, industry_category, is_betting_company, lottery_certificate_number, website_url, established_date, created_at, updated_at, status FROM merchants.merchants
WHERE id = $1
`

// Merchant queries for v2_merchant module
func (q *Queries) GetMerchant(ctx context.Context, id uuid.UUID) (MerchantsMerchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchant, id)
	var i MerchantsMerchant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LegalName,
		&i.TradingName,
		&i.BusinessRegistrationNumber,
		&i.TaxIdentificationNumber,
		&i.BusinessType,
		&i.IndustryCategory,
		&i.IsBettingCompany,
		&i.LotteryCertificateNumber,
		&i.WebsiteUrl,
		&i.EstablishedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getMerchantAddresses = `-- name: GetMerchantAddresses :many
SELECT id, merchant_id, address_type, street_address_1, street_address_2, city, region, postal_code, country, is_primary, created_at, updated_at FROM merchants.addresses
WHERE merchant_id = $1
ORDER BY is_primary DESC, created_at ASC
`

func (q *Queries) GetMerchantAddresses(ctx context.Context, merchantID uuid.UUID) ([]MerchantsAddress, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantAddresses, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MerchantsAddress
	for rows.Next() {
		var i MerchantsAddress
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.AddressType,
			&i.StreetAddress1,
			&i.StreetAddress2,
			&i.City,
			&i.Region,
			&i.PostalCode,
			&i.Country,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantBankAccounts = `-- name: GetMerchantBankAccounts :many
SELECT id, merchant_id, account_holder_name, bank_name, bank_code, branch_code, account_number, account_type, currency, is_primary, is_verified, verification_document_id, created_at, updated_at FROM merchants.bank_accounts
WHERE merchant_id = $1
ORDER BY is_primary DESC, created_at ASC
`

func (q *Queries) GetMerchantBankAccounts(ctx context.Context, merchantID uuid.UUID) ([]MerchantsBankAccount, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantBankAccounts, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MerchantsBankAccount
	for rows.Next() {
		var i MerchantsBankAccount
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.AccountHolderName,
			&i.BankName,
			&i.BankCode,
			&i.BranchCode,
			&i.AccountNumber,
			&i.AccountType,
			&i.Currency,
			&i.IsPrimary,
			&i.IsVerified,
			&i.VerificationDocumentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantByUserID = `-- name: GetMerchantByUserID :one
SELECT id, user_id, legal_name, trading_name, business_registration_number, tax_identification_number, business_type, industry_category, is_betting_company, lottery_certificate_number, website_url, established_date, created_at, updated_at, status FROM merchants.merchants
WHERE user_id = $1
`

func (q *Queries) GetMerchantByUserID(ctx context.Context, userID uuid.UUID) (MerchantsMerchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantByUserID, userID)
	var i MerchantsMerchant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LegalName,
		&i.TradingName,
		&i.BusinessRegistrationNumber,
		&i.TaxIdentificationNumber,
		&i.BusinessType,
		&i.IndustryCategory,
		&i.IsBettingCompany,
		&i.LotteryCertificateNumber,
		&i.WebsiteUrl,
		&i.EstablishedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getMerchantContacts = `-- name: GetMerchantContacts :many
SELECT id, merchant_id, contact_type, first_name, last_name, email, phone_number, position, is_verified, created_at, updated_at FROM merchants.contacts
WHERE merchant_id = $1
ORDER BY contact_type, created_at ASC
`

func (q *Queries) GetMerchantContacts(ctx context.Context, merchantID uuid.UUID) ([]MerchantsContact, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantContacts, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MerchantsContact
	for rows.Next() {
		var i MerchantsContact
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.ContactType,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.Position,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantDocuments = `-- name: GetMerchantDocuments :many
SELECT id, merchant_id, document_type, document_number, file_url, file_hash, verified_by, verified_at, status, rejection_reason, created_at, updated_at FROM merchants.documents
WHERE merchant_id = $1
ORDER BY document_type, created_at DESC
`

func (q *Queries) GetMerchantDocuments(ctx context.Context, merchantID uuid.UUID) ([]MerchantsDocument, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantDocuments, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MerchantsDocument
	for rows.Next() {
		var i MerchantsDocument
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.DocumentType,
			&i.DocumentNumber,
			&i.FileUrl,
			&i.FileHash,
			&i.VerifiedBy,
			&i.VerifiedAt,
			&i.Status,
			&i.RejectionReason,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantSettings = `-- name: GetMerchantSettings :one
SELECT merchant_id, default_currency, default_language, checkout_theme, enable_webhooks, webhook_url, webhook_secret, auto_settlement, settlement_frequency, risk_settings, created_at, updated_at FROM merchants.settings
WHERE merchant_id = $1
`

func (q *Queries) GetMerchantSettings(ctx context.Context, merchantID uuid.UUID) (MerchantsSetting, error) {
	row := q.db.QueryRowContext(ctx, getMerchantSettings, merchantID)
	var i MerchantsSetting
	err := row.Scan(
		&i.MerchantID,
		&i.DefaultCurrency,
		&i.DefaultLanguage,
		&i.CheckoutTheme,
		&i.EnableWebhooks,
		&i.WebhookUrl,
		&i.WebhookSecret,
		&i.AutoSettlement,
		&i.SettlementFrequency,
		&i.RiskSettings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAPIKey = `-- name: CreateAPIKey :one

INSERT INTO api_keys (
    id, user_id, created_by, name, description, public_key, secret_key,
    can_withdrawal, can_process_payment, created_at, updated_at, expires_at, 
    is_active, merchant_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
RETURNING id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id
`

type CreateAPIKeyParams struct {
	ID                uuid.UUID      `json:"id"`
	UserID            uuid.UUID      `json:"user_id"`
	CreatedBy         uuid.UUID      `json:"created_by"`
	Name              string         `json:"name"`
	Description       sql.NullString `json:"description"`
	PublicKey         string         `json:"public_key"`
	SecretKey         string         `json:"secret_key"`
	CanWithdrawal     bool           `json:"can_withdrawal"`
	CanProcessPayment bool           `json:"can_process_payment"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
	ExpiresAt         sql.NullTime   `json:"expires_at"`
	IsActive          bool           `json:"is_active"`
	MerchantID        uuid.NullUUID  `json:"merchant_id"`
}

// Common columns for reference:
// id, user_id, created_by, name, description, public_key, secret_key,
// can_withdrawal, can_process_payment, created_at, updated_at,
// expires_at, last_used_at, is_active, merchant_id
func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey,
		arg.ID,
		arg.UserID,
		arg.CreatedBy,
		arg.Name,
		arg.Description,
		arg.PublicKey,
		arg.SecretKey,
		arg.CanWithdrawal,
		arg.CanProcessPayment,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
		arg.IsActive,
		arg.MerchantID,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKey, id)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id FROM api_keys
WHERE id = $1
`

func (q *Queries) GetAPIKey(ctx context.Context, id uuid.UUID) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKey, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

const getAPIKeyByPublicKey = `-- name: GetAPIKeyByPublicKey :one
SELECT id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id FROM api_keys
WHERE public_key = $1
`

func (q *Queries) GetAPIKeyByPublicKey(ctx context.Context, publicKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByPublicKey, publicKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

const getAPIKeyBySecretKey = `-- name: GetAPIKeyBySecretKey :one
SELECT id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id FROM api_keys
WHERE secret_key = $1
`

func (q *Queries) GetAPIKeyBySecretKey(ctx context.Context, secretKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyBySecretKey, secretKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id FROM api_keys
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeys(ctx context.Context, userID uuid.UUID) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, listAPIKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.PublicKey,
			&i.SecretKey,
			&i.CanWithdrawal,
			&i.CanProcessPayment,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.IsActive,
			&i.MerchantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMerchantAPIKeys = `-- name: ListMerchantAPIKeys :many
SELECT id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id FROM api_keys
WHERE merchant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListMerchantAPIKeys(ctx context.Context, merchantID uuid.NullUUID) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, listMerchantAPIKeys, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.PublicKey,
			&i.SecretKey,
			&i.CanWithdrawal,
			&i.CanProcessPayment,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.IsActive,
			&i.MerchantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rotateAPIKeySecret = `-- name: RotateAPIKeySecret :one
UPDATE api_keys
SET secret_key = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id
`

type RotateAPIKeySecretParams struct {
	ID        uuid.UUID `json:"id"`
	SecretKey string    `json:"secret_key"`
}

func (q *Queries) RotateAPIKeySecret(ctx context.Context, arg RotateAPIKeySecretParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, rotateAPIKeySecret, arg.ID, arg.SecretKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE api_keys
SET name = COALESCE($2, name),
    description = COALESCE($3, description),
    can_withdrawal = COALESCE($4, can_withdrawal),
    can_process_payment = COALESCE($5, can_process_payment),
    is_active = COALESCE($6, is_active),
    expires_at = COALESCE($7, expires_at),
    merchant_id = COALESCE($8, merchant_id),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id
`

type UpdateAPIKeyParams struct {
	ID                uuid.UUID      `json:"id"`
	Name              string         `json:"name"`
	Description       sql.NullString `json:"description"`
	CanWithdrawal     bool           `json:"can_withdrawal"`
	CanProcessPayment bool           `json:"can_process_payment"`
	IsActive          bool           `json:"is_active"`
	ExpiresAt         sql.NullTime   `json:"expires_at"`
	MerchantID        uuid.NullUUID  `json:"merchant_id"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, updateAPIKey,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CanWithdrawal,
		arg.CanProcessPayment,
		arg.IsActive,
		arg.ExpiresAt,
		arg.MerchantID,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

const updateLastUsedAt = `-- name: UpdateLastUsedAt :one
UPDATE api_keys
SET last_used_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id
`

func (q *Queries) UpdateLastUsedAt(ctx context.Context, id uuid.UUID) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, updateLastUsedAt, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

const validateAPIKey = `-- name: ValidateAPIKey :one
SELECT id, user_id, created_by, name, description, public_key, secret_key, can_withdrawal, can_process_payment, created_at, updated_at, expires_at, last_used_at, is_active, merchant_id FROM api_keys
WHERE public_key = $1 AND secret_key = $2 AND is_active = true
`

type ValidateAPIKeyParams struct {
	PublicKey string `json:"public_key"`
	SecretKey string `json:"secret_key"`
}

func (q *Queries) ValidateAPIKey(ctx context.Context, arg ValidateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, validateAPIKey, arg.PublicKey, arg.SecretKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.PublicKey,
		&i.SecretKey,
		&i.CanWithdrawal,
		&i.CanProcessPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.IsActive,
		&i.MerchantID,
	)
	return i, err
}

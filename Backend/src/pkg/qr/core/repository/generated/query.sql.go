// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const countQRLinksByMerchant = `-- name: CountQRLinksByMerchant :one
SELECT COUNT(*) FROM public.qr_links 
WHERE merchant_id = $1 AND is_active = true
`

func (q *Queries) CountQRLinksByMerchant(ctx context.Context, merchantID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countQRLinksByMerchant, merchantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countQRLinksByUser = `-- name: CountQRLinksByUser :one
SELECT COUNT(*) FROM public.qr_links 
WHERE user_id = $1 AND is_active = true
`

func (q *Queries) CountQRLinksByUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countQRLinksByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createQRLink = `-- name: CreateQRLink :one
INSERT INTO public.qr_links (
    id, user_id, merchant_id, type, amount, supported_methods, 
    tag, title, description, image_url, is_tip_enabled
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, user_id, merchant_id, type, amount, supported_methods, tag, title, description, image_url, is_tip_enabled, is_active, created_at, updated_at
`

type CreateQRLinkParams struct {
	ID               uuid.UUID       `db:"id" json:"id"`
	UserID           uuid.UUID       `db:"user_id" json:"user_id"`
	MerchantID       uuid.UUID       `db:"merchant_id" json:"merchant_id"`
	Type             QrLinkType      `db:"type" json:"type"`
	Amount           sql.NullString  `db:"amount" json:"amount"`
	SupportedMethods json.RawMessage `db:"supported_methods" json:"supported_methods"`
	Tag              QrLinkTag       `db:"tag" json:"tag"`
	Title            sql.NullString  `db:"title" json:"title"`
	Description      sql.NullString  `db:"description" json:"description"`
	ImageUrl         sql.NullString  `db:"image_url" json:"image_url"`
	IsTipEnabled     sql.NullBool    `db:"is_tip_enabled" json:"is_tip_enabled"`
}

func (q *Queries) CreateQRLink(ctx context.Context, arg CreateQRLinkParams) (QrLink, error) {
	row := q.db.QueryRowContext(ctx, createQRLink,
		arg.ID,
		arg.UserID,
		arg.MerchantID,
		arg.Type,
		arg.Amount,
		arg.SupportedMethods,
		arg.Tag,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
		arg.IsTipEnabled,
	)
	var i QrLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Type,
		&i.Amount,
		&i.SupportedMethods,
		&i.Tag,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.IsTipEnabled,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteQRLink = `-- name: DeleteQRLink :exec
UPDATE public.qr_links 
SET is_active = false, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
`

type DeleteQRLinkParams struct {
	ID     uuid.UUID `db:"id" json:"id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteQRLink(ctx context.Context, arg DeleteQRLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteQRLink, arg.ID, arg.UserID)
	return err
}

const getQRLink = `-- name: GetQRLink :one
SELECT id, user_id, merchant_id, type, amount, supported_methods, tag, title, description, image_url, is_tip_enabled, is_active, created_at, updated_at FROM public.qr_links 
WHERE id = $1 AND is_active = true
`

func (q *Queries) GetQRLink(ctx context.Context, id uuid.UUID) (QrLink, error) {
	row := q.db.QueryRowContext(ctx, getQRLink, id)
	var i QrLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Type,
		&i.Amount,
		&i.SupportedMethods,
		&i.Tag,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.IsTipEnabled,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQRLinksByMerchant = `-- name: GetQRLinksByMerchant :many
SELECT id, user_id, merchant_id, type, amount, supported_methods, tag, title, description, image_url, is_tip_enabled, is_active, created_at, updated_at FROM public.qr_links 
WHERE merchant_id = $1 AND is_active = true
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetQRLinksByMerchantParams struct {
	MerchantID uuid.UUID `db:"merchant_id" json:"merchant_id"`
	Limit      int32     `db:"limit" json:"limit"`
	Offset     int32     `db:"offset" json:"offset"`
}

func (q *Queries) GetQRLinksByMerchant(ctx context.Context, arg GetQRLinksByMerchantParams) ([]QrLink, error) {
	rows, err := q.db.QueryContext(ctx, getQRLinksByMerchant, arg.MerchantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QrLink
	for rows.Next() {
		var i QrLink
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MerchantID,
			&i.Type,
			&i.Amount,
			&i.SupportedMethods,
			&i.Tag,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.IsTipEnabled,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQRLinksByUser = `-- name: GetQRLinksByUser :many
SELECT id, user_id, merchant_id, type, amount, supported_methods, tag, title, description, image_url, is_tip_enabled, is_active, created_at, updated_at FROM public.qr_links 
WHERE user_id = $1 AND is_active = true
ORDER BY created_at DESC  
LIMIT $2 OFFSET $3
`

type GetQRLinksByUserParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Limit  int32     `db:"limit" json:"limit"`
	Offset int32     `db:"offset" json:"offset"`
}

func (q *Queries) GetQRLinksByUser(ctx context.Context, arg GetQRLinksByUserParams) ([]QrLink, error) {
	rows, err := q.db.QueryContext(ctx, getQRLinksByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QrLink
	for rows.Next() {
		var i QrLink
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MerchantID,
			&i.Type,
			&i.Amount,
			&i.SupportedMethods,
			&i.Tag,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.IsTipEnabled,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQRLink = `-- name: UpdateQRLink :one
UPDATE public.qr_links 
SET 
    amount = COALESCE($2, amount),
    supported_methods = COALESCE($3, supported_methods),
    tag = COALESCE($4, tag),
    title = COALESCE($5, title),
    description = COALESCE($6, description),
    image_url = COALESCE($7, image_url),
    is_tip_enabled = COALESCE($8, is_tip_enabled),
    is_active = COALESCE($9, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $10
RETURNING id, user_id, merchant_id, type, amount, supported_methods, tag, title, description, image_url, is_tip_enabled, is_active, created_at, updated_at
`

type UpdateQRLinkParams struct {
	ID               uuid.UUID       `db:"id" json:"id"`
	Amount           sql.NullString  `db:"amount" json:"amount"`
	SupportedMethods json.RawMessage `db:"supported_methods" json:"supported_methods"`
	Tag              QrLinkTag       `db:"tag" json:"tag"`
	Title            sql.NullString  `db:"title" json:"title"`
	Description      sql.NullString  `db:"description" json:"description"`
	ImageUrl         sql.NullString  `db:"image_url" json:"image_url"`
	IsTipEnabled     sql.NullBool    `db:"is_tip_enabled" json:"is_tip_enabled"`
	IsActive         sql.NullBool    `db:"is_active" json:"is_active"`
	UserID           uuid.UUID       `db:"user_id" json:"user_id"`
}

func (q *Queries) UpdateQRLink(ctx context.Context, arg UpdateQRLinkParams) (QrLink, error) {
	row := q.db.QueryRowContext(ctx, updateQRLink,
		arg.ID,
		arg.Amount,
		arg.SupportedMethods,
		arg.Tag,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
		arg.IsTipEnabled,
		arg.IsActive,
		arg.UserID,
	)
	var i QrLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Type,
		&i.Amount,
		&i.SupportedMethods,
		&i.Tag,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.IsTipEnabled,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type QrLinkTag string

const (
	QrLinkTagRESTAURANT QrLinkTag = "RESTAURANT"
	QrLinkTagDONATION   QrLinkTag = "DONATION"
	QrLinkTagSHOP       QrLinkTag = "SHOP"
)

func (e *QrLinkTag) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QrLinkTag(s)
	case string:
		*e = QrLinkTag(s)
	default:
		return fmt.Errorf("unsupported scan type for QrLinkTag: %T", src)
	}
	return nil
}

type NullQrLinkTag struct {
	QrLinkTag QrLinkTag `json:"qr_link_tag"`
	Valid     bool      `json:"valid"` // Valid is true if QrLinkTag is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQrLinkTag) Scan(value interface{}) error {
	if value == nil {
		ns.QrLinkTag, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QrLinkTag.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQrLinkTag) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QrLinkTag), nil
}

type QrLinkType string

const (
	QrLinkTypeDYNAMIC QrLinkType = "DYNAMIC"
	QrLinkTypeSTATIC  QrLinkType = "STATIC"
)

func (e *QrLinkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QrLinkType(s)
	case string:
		*e = QrLinkType(s)
	default:
		return fmt.Errorf("unsupported scan type for QrLinkType: %T", src)
	}
	return nil
}

type NullQrLinkType struct {
	QrLinkType QrLinkType `json:"qr_link_type"`
	Valid      bool       `json:"valid"` // Valid is true if QrLinkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQrLinkType) Scan(value interface{}) error {
	if value == nil {
		ns.QrLinkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QrLinkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQrLinkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QrLinkType), nil
}

type QrLink struct {
	ID               uuid.UUID       `db:"id" json:"id"`
	UserID           uuid.UUID       `db:"user_id" json:"user_id"`
	MerchantID       uuid.UUID       `db:"merchant_id" json:"merchant_id"`
	Type             QrLinkType      `db:"type" json:"type"`
	Amount           sql.NullString  `db:"amount" json:"amount"`
	SupportedMethods json.RawMessage `db:"supported_methods" json:"supported_methods"`
	Tag              QrLinkTag       `db:"tag" json:"tag"`
	Title            sql.NullString  `db:"title" json:"title"`
	Description      sql.NullString  `db:"description" json:"description"`
	ImageUrl         sql.NullString  `db:"image_url" json:"image_url"`
	IsTipEnabled     sql.NullBool    `db:"is_tip_enabled" json:"is_tip_enabled"`
	IsActive         sql.NullBool    `db:"is_active" json:"is_active"`
	CreatedAt        time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt        time.Time       `db:"updated_at" json:"updated_at"`
}

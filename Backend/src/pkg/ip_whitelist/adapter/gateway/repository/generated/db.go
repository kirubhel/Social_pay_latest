// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkIPWhitelistedStmt, err = db.PrepareContext(ctx, checkIPWhitelisted); err != nil {
		return nil, fmt.Errorf("error preparing query CheckIPWhitelisted: %w", err)
	}
	if q.createWhitelistedIPStmt, err = db.PrepareContext(ctx, createWhitelistedIP); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWhitelistedIP: %w", err)
	}
	if q.deleteWhitelistedIPStmt, err = db.PrepareContext(ctx, deleteWhitelistedIP); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWhitelistedIP: %w", err)
	}
	if q.getWhitelistedIPStmt, err = db.PrepareContext(ctx, getWhitelistedIP); err != nil {
		return nil, fmt.Errorf("error preparing query GetWhitelistedIP: %w", err)
	}
	if q.getWhitelistedIPByIDStmt, err = db.PrepareContext(ctx, getWhitelistedIPByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWhitelistedIPByID: %w", err)
	}
	if q.getWhitelistedIPsByMerchantIDStmt, err = db.PrepareContext(ctx, getWhitelistedIPsByMerchantID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWhitelistedIPsByMerchantID: %w", err)
	}
	if q.updateWhitelistedIPStmt, err = db.PrepareContext(ctx, updateWhitelistedIP); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWhitelistedIP: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkIPWhitelistedStmt != nil {
		if cerr := q.checkIPWhitelistedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkIPWhitelistedStmt: %w", cerr)
		}
	}
	if q.createWhitelistedIPStmt != nil {
		if cerr := q.createWhitelistedIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWhitelistedIPStmt: %w", cerr)
		}
	}
	if q.deleteWhitelistedIPStmt != nil {
		if cerr := q.deleteWhitelistedIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWhitelistedIPStmt: %w", cerr)
		}
	}
	if q.getWhitelistedIPStmt != nil {
		if cerr := q.getWhitelistedIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWhitelistedIPStmt: %w", cerr)
		}
	}
	if q.getWhitelistedIPByIDStmt != nil {
		if cerr := q.getWhitelistedIPByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWhitelistedIPByIDStmt: %w", cerr)
		}
	}
	if q.getWhitelistedIPsByMerchantIDStmt != nil {
		if cerr := q.getWhitelistedIPsByMerchantIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWhitelistedIPsByMerchantIDStmt: %w", cerr)
		}
	}
	if q.updateWhitelistedIPStmt != nil {
		if cerr := q.updateWhitelistedIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWhitelistedIPStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                DBTX
	tx                                *sql.Tx
	checkIPWhitelistedStmt            *sql.Stmt
	createWhitelistedIPStmt           *sql.Stmt
	deleteWhitelistedIPStmt           *sql.Stmt
	getWhitelistedIPStmt              *sql.Stmt
	getWhitelistedIPByIDStmt          *sql.Stmt
	getWhitelistedIPsByMerchantIDStmt *sql.Stmt
	updateWhitelistedIPStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                tx,
		tx:                                tx,
		checkIPWhitelistedStmt:            q.checkIPWhitelistedStmt,
		createWhitelistedIPStmt:           q.createWhitelistedIPStmt,
		deleteWhitelistedIPStmt:           q.deleteWhitelistedIPStmt,
		getWhitelistedIPStmt:              q.getWhitelistedIPStmt,
		getWhitelistedIPByIDStmt:          q.getWhitelistedIPByIDStmt,
		getWhitelistedIPsByMerchantIDStmt: q.getWhitelistedIPsByMerchantIDStmt,
		updateWhitelistedIPStmt:           q.updateWhitelistedIPStmt,
	}
}

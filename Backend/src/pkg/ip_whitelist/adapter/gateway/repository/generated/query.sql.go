// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const checkIPWhitelisted = `-- name: CheckIPWhitelisted :one
SELECT EXISTS (
    SELECT 1 FROM ip_whitelist.whitelisted_ips
    WHERE merchant_id = $1
    AND is_active = true
    AND ip_address >>= $2::inet
) as is_whitelisted
`

type CheckIPWhitelistedParams struct {
	MerchantID uuid.UUID   `json:"merchant_id"`
	Column2    pqtype.Inet `json:"column_2"`
}

func (q *Queries) CheckIPWhitelisted(ctx context.Context, arg CheckIPWhitelistedParams) (bool, error) {
	row := q.queryRow(ctx, q.checkIPWhitelistedStmt, checkIPWhitelisted, arg.MerchantID, arg.Column2)
	var is_whitelisted bool
	err := row.Scan(&is_whitelisted)
	return is_whitelisted, err
}

const createWhitelistedIP = `-- name: CreateWhitelistedIP :exec
INSERT INTO ip_whitelist.whitelisted_ips (
    id, merchant_id, ip_address, description, is_active, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, NOW(), NOW()
)
`

type CreateWhitelistedIPParams struct {
	ID          uuid.UUID      `json:"id"`
	MerchantID  uuid.UUID      `json:"merchant_id"`
	IpAddress   pqtype.CIDR    `json:"ip_address"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
}

func (q *Queries) CreateWhitelistedIP(ctx context.Context, arg CreateWhitelistedIPParams) error {
	_, err := q.exec(ctx, q.createWhitelistedIPStmt, createWhitelistedIP,
		arg.ID,
		arg.MerchantID,
		arg.IpAddress,
		arg.Description,
		arg.IsActive,
	)
	return err
}

const deleteWhitelistedIP = `-- name: DeleteWhitelistedIP :exec
DELETE FROM ip_whitelist.whitelisted_ips
WHERE id = $1
`

func (q *Queries) DeleteWhitelistedIP(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteWhitelistedIPStmt, deleteWhitelistedIP, id)
	return err
}

const getWhitelistedIP = `-- name: GetWhitelistedIP :one
SELECT EXISTS (
    SELECT 1 FROM ip_whitelist.whitelisted_ips
    WHERE merchant_id = $1 AND ip_address = $2
) as ip_whitelisted
`

type GetWhitelistedIPParams struct {
	MerchantID uuid.UUID   `json:"merchant_id"`
	IpAddress  pqtype.CIDR `json:"ip_address"`
}

func (q *Queries) GetWhitelistedIP(ctx context.Context, arg GetWhitelistedIPParams) (bool, error) {
	row := q.queryRow(ctx, q.getWhitelistedIPStmt, getWhitelistedIP, arg.MerchantID, arg.IpAddress)
	var ip_whitelisted bool
	err := row.Scan(&ip_whitelisted)
	return ip_whitelisted, err
}

const getWhitelistedIPByID = `-- name: GetWhitelistedIPByID :one
SELECT id, merchant_id, ip_address, description, is_active, created_at, updated_at FROM ip_whitelist.whitelisted_ips
WHERE id = $1
`

func (q *Queries) GetWhitelistedIPByID(ctx context.Context, id uuid.UUID) (IpWhitelistWhitelistedIp, error) {
	row := q.queryRow(ctx, q.getWhitelistedIPByIDStmt, getWhitelistedIPByID, id)
	var i IpWhitelistWhitelistedIp
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.IpAddress,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWhitelistedIPsByMerchantID = `-- name: GetWhitelistedIPsByMerchantID :many
SELECT id, merchant_id, ip_address, description, is_active, created_at, updated_at FROM ip_whitelist.whitelisted_ips
WHERE merchant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetWhitelistedIPsByMerchantID(ctx context.Context, merchantID uuid.UUID) ([]IpWhitelistWhitelistedIp, error) {
	rows, err := q.query(ctx, q.getWhitelistedIPsByMerchantIDStmt, getWhitelistedIPsByMerchantID, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IpWhitelistWhitelistedIp{}
	for rows.Next() {
		var i IpWhitelistWhitelistedIp
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.IpAddress,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWhitelistedIP = `-- name: UpdateWhitelistedIP :exec
UPDATE ip_whitelist.whitelisted_ips
SET ip_address = $2,
    is_active = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateWhitelistedIPParams struct {
	ID        uuid.UUID   `json:"id"`
	IpAddress pqtype.CIDR `json:"ip_address"`
	IsActive  bool        `json:"is_active"`
}

func (q *Queries) UpdateWhitelistedIP(ctx context.Context, arg UpdateWhitelistedIPParams) error {
	_, err := q.exec(ctx, q.updateWhitelistedIPStmt, updateWhitelistedIP, arg.ID, arg.IpAddress, arg.IsActive)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createMerchantWallet = `-- name: CreateMerchantWallet :exec
INSERT INTO merchant.wallet (
    id, user_id, merchant_id, amount, locked_amount, currency, wallet_type, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, NOW(), NOW()
)
`

type CreateMerchantWalletParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	MerchantID   uuid.UUID `json:"merchant_id"`
	Amount       float64   `json:"amount"`
	LockedAmount float64   `json:"locked_amount"`
	Currency     string    `json:"currency"`
	WalletType   string    `json:"wallet_type"`
}

func (q *Queries) CreateMerchantWallet(ctx context.Context, arg CreateMerchantWalletParams) error {
	_, err := q.exec(ctx, q.createMerchantWalletStmt, createMerchantWallet,
		arg.ID,
		arg.UserID,
		arg.MerchantID,
		arg.Amount,
		arg.LockedAmount,
		arg.Currency,
		arg.WalletType,
	)
	return err
}

const getAdminWallet = `-- name: GetAdminWallet :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, wallet_type, created_at, updated_at FROM merchant.wallet
WHERE  wallet_type = 'super_admin'
`

func (q *Queries) GetAdminWallet(ctx context.Context) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getAdminWalletStmt, getAdminWallet)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.WalletType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminWalletForUpdate = `-- name: GetAdminWalletForUpdate :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, wallet_type, created_at, updated_at FROM merchant.wallet
WHERE wallet_type = 'super_admin'
FOR UPDATE
`

func (q *Queries) GetAdminWalletForUpdate(ctx context.Context) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getAdminWalletForUpdateStmt, getAdminWalletForUpdate)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.WalletType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMerchantWalletByMerchantID = `-- name: GetMerchantWalletByMerchantID :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, wallet_type, created_at, updated_at FROM merchant.wallet
WHERE merchant_id = $1 AND wallet_type = 'merchant'
`

func (q *Queries) GetMerchantWalletByMerchantID(ctx context.Context, merchantID uuid.UUID) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getMerchantWalletByMerchantIDStmt, getMerchantWalletByMerchantID, merchantID)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.WalletType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMerchantWalletByMerchantIDForUpdate = `-- name: GetMerchantWalletByMerchantIDForUpdate :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, wallet_type, created_at, updated_at FROM merchant.wallet
WHERE merchant_id = $1 AND wallet_type = 'merchant'
FOR UPDATE
`

func (q *Queries) GetMerchantWalletByMerchantIDForUpdate(ctx context.Context, merchantID uuid.UUID) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getMerchantWalletByMerchantIDForUpdateStmt, getMerchantWalletByMerchantIDForUpdate, merchantID)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.WalletType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMerchantWalletByUserID = `-- name: GetMerchantWalletByUserID :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, wallet_type, created_at, updated_at FROM merchant.wallet
WHERE user_id = $1 AND wallet_type = 'merchant'
`

func (q *Queries) GetMerchantWalletByUserID(ctx context.Context, userID uuid.UUID) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getMerchantWalletByUserIDStmt, getMerchantWalletByUserID, userID)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.WalletType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalAdminWalletAmount = `-- name: GetTotalAdminWalletAmount :one
SELECT 
    CAST(SUM(amount) AS FLOAT) as total_amount,
    CAST(SUM(locked_amount) AS FLOAT) as total_locked_amount,
    currency
FROM merchant.wallet
WHERE wallet_type = 'super_admin'
GROUP BY currency
`

type GetTotalAdminWalletAmountRow struct {
	TotalAmount       float64 `json:"total_amount"`
	TotalLockedAmount float64 `json:"total_locked_amount"`
	Currency          string  `json:"currency"`
}

func (q *Queries) GetTotalAdminWalletAmount(ctx context.Context) (GetTotalAdminWalletAmountRow, error) {
	row := q.queryRow(ctx, q.getTotalAdminWalletAmountStmt, getTotalAdminWalletAmount)
	var i GetTotalAdminWalletAmountRow
	err := row.Scan(&i.TotalAmount, &i.TotalLockedAmount, &i.Currency)
	return i, err
}

const updateMerchantWallet = `-- name: UpdateMerchantWallet :exec
UPDATE merchant.wallet
SET amount = $2,
    locked_amount = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateMerchantWalletParams struct {
	ID           uuid.UUID `json:"id"`
	Amount       float64   `json:"amount"`
	LockedAmount float64   `json:"locked_amount"`
}

func (q *Queries) UpdateMerchantWallet(ctx context.Context, arg UpdateMerchantWalletParams) error {
	_, err := q.exec(ctx, q.updateMerchantWalletStmt, updateMerchantWallet, arg.ID, arg.Amount, arg.LockedAmount)
	return err
}

const updateMerchantWalletAmountByMerchantID = `-- name: UpdateMerchantWalletAmountByMerchantID :exec
UPDATE merchant.wallet
SET amount = $2,
    updated_at = NOW()
WHERE merchant_id = $1 AND wallet_type = 'merchant'
`

type UpdateMerchantWalletAmountByMerchantIDParams struct {
	MerchantID uuid.UUID `json:"merchant_id"`
	Amount     float64   `json:"amount"`
}

func (q *Queries) UpdateMerchantWalletAmountByMerchantID(ctx context.Context, arg UpdateMerchantWalletAmountByMerchantIDParams) error {
	_, err := q.exec(ctx, q.updateMerchantWalletAmountByMerchantIDStmt, updateMerchantWalletAmountByMerchantID, arg.MerchantID, arg.Amount)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createMerchantWallet = `-- name: CreateMerchantWallet :exec
INSERT INTO merchant.wallet (
    id, user_id, merchant_id, amount, locked_amount, currency, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, NOW(), NOW()
)
`

type CreateMerchantWalletParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	MerchantID   uuid.UUID `json:"merchant_id"`
	Amount       float64   `json:"amount"`
	LockedAmount float64   `json:"locked_amount"`
	Currency     string    `json:"currency"`
}

// @param id uuid
// @param user_id uuid
// @param merchant_id uuid
// @param amount numeric
// @param locked_amount numeric
// @param currency text
func (q *Queries) CreateMerchantWallet(ctx context.Context, arg CreateMerchantWalletParams) error {
	_, err := q.exec(ctx, q.createMerchantWalletStmt, createMerchantWallet,
		arg.ID,
		arg.UserID,
		arg.MerchantID,
		arg.Amount,
		arg.LockedAmount,
		arg.Currency,
	)
	return err
}

const deactivateMerchantWallet = `-- name: DeactivateMerchantWallet :exec
UPDATE merchant.wallet
SET is_active = false,
    updated_at = NOW()
WHERE id = $1
`

// @param id uuid
func (q *Queries) DeactivateMerchantWallet(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deactivateMerchantWalletStmt, deactivateMerchantWallet, id)
	return err
}

const getMerchantWallet = `-- name: GetMerchantWallet :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, created_at, updated_at FROM merchant.wallet
WHERE merchant_id = $1
`

// @param merchant_id uuid
func (q *Queries) GetMerchantWallet(ctx context.Context, merchantID uuid.UUID) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getMerchantWalletStmt, getMerchantWallet, merchantID)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMerchantWalletByMerchantID = `-- name: GetMerchantWalletByMerchantID :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, created_at, updated_at FROM merchant.wallet
WHERE merchant_id = $1
`

// @param merchant_id uuid
func (q *Queries) GetMerchantWalletByMerchantID(ctx context.Context, merchantID uuid.UUID) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getMerchantWalletByMerchantIDStmt, getMerchantWalletByMerchantID, merchantID)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMerchantWalletByUserID = `-- name: GetMerchantWalletByUserID :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, created_at, updated_at FROM merchant.wallet
WHERE user_id = $1
`

// @param user_id uuid
func (q *Queries) GetMerchantWalletByUserID(ctx context.Context, userID uuid.UUID) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getMerchantWalletByUserIDStmt, getMerchantWalletByUserID, userID)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMerchantWalletForUpdate = `-- name: GetMerchantWalletForUpdate :one
SELECT id, user_id, merchant_id, amount, locked_amount, currency, created_at, updated_at FROM merchant.wallet
WHERE merchant_id = $1
FOR UPDATE
`

// @param merchant_id uuid
func (q *Queries) GetMerchantWalletForUpdate(ctx context.Context, merchantID uuid.UUID) (MerchantWallet, error) {
	row := q.queryRow(ctx, q.getMerchantWalletForUpdateStmt, getMerchantWalletForUpdate, merchantID)
	var i MerchantWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MerchantID,
		&i.Amount,
		&i.LockedAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMerchantWallet = `-- name: UpdateMerchantWallet :exec
UPDATE merchant.wallet
SET amount = $2,
    locked_amount = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateMerchantWalletParams struct {
	ID           uuid.UUID `json:"id"`
	Amount       float64   `json:"amount"`
	LockedAmount float64   `json:"locked_amount"`
}

// @param id uuid
// @param amount numeric
// @param locked_amount numeric
func (q *Queries) UpdateMerchantWallet(ctx context.Context, arg UpdateMerchantWalletParams) error {
	_, err := q.exec(ctx, q.updateMerchantWalletStmt, updateMerchantWallet, arg.ID, arg.Amount, arg.LockedAmount)
	return err
}

const updateMerchantWalletLastSync = `-- name: UpdateMerchantWalletLastSync :exec
UPDATE merchant.wallet
SET last_sync_at = NOW(),
    updated_at = NOW()
WHERE id = $1 AND is_active = true
`

// @param id uuid
func (q *Queries) UpdateMerchantWalletLastSync(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.updateMerchantWalletLastSyncStmt, updateMerchantWalletLastSync, id)
	return err
}

const updateMerchantWalletWithTx = `-- name: UpdateMerchantWalletWithTx :exec
UPDATE merchant.wallet
SET amount = $2,
    locked_amount = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateMerchantWalletWithTxParams struct {
	ID           uuid.UUID `json:"id"`
	Amount       float64   `json:"amount"`
	LockedAmount float64   `json:"locked_amount"`
}

// @param id uuid
// @param amount numeric
// @param locked_amount numeric
func (q *Queries) UpdateMerchantWalletWithTx(ctx context.Context, arg UpdateMerchantWalletWithTxParams) error {
	_, err := q.exec(ctx, q.updateMerchantWalletWithTxStmt, updateMerchantWalletWithTx, arg.ID, arg.Amount, arg.LockedAmount)
	return err
}

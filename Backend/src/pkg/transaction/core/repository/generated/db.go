// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countTransactionsStmt, err = db.PrepareContext(ctx, countTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query CountTransactions: %w", err)
	}
	if q.createHostedPaymentStmt, err = db.PrepareContext(ctx, createHostedPayment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHostedPayment: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createTransactionWithContextStmt, err = db.PrepareContext(ctx, createTransactionWithContext); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransactionWithContext: %w", err)
	}
	if q.getByMerchantIdAndReferenceIDStmt, err = db.PrepareContext(ctx, getByMerchantIdAndReferenceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetByMerchantIdAndReferenceID: %w", err)
	}
	if q.getByReferenceIDStmt, err = db.PrepareContext(ctx, getByReferenceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetByReferenceID: %w", err)
	}
	if q.getByUserIdAndReferenceIDStmt, err = db.PrepareContext(ctx, getByUserIdAndReferenceID); err != nil {
		return nil, fmt.Errorf("error preparing query GetByUserIdAndReferenceID: %w", err)
	}
	if q.getExpiredHostedPaymentsStmt, err = db.PrepareContext(ctx, getExpiredHostedPayments); err != nil {
		return nil, fmt.Errorf("error preparing query GetExpiredHostedPayments: %w", err)
	}
	if q.getFilteredMerchantTransactionsStmt, err = db.PrepareContext(ctx, getFilteredMerchantTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilteredMerchantTransactions: %w", err)
	}
	if q.getFilteredTransactionsStmt, err = db.PrepareContext(ctx, getFilteredTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilteredTransactions: %w", err)
	}
	if q.getHostedPaymentStmt, err = db.PrepareContext(ctx, getHostedPayment); err != nil {
		return nil, fmt.Errorf("error preparing query GetHostedPayment: %w", err)
	}
	if q.getHostedPaymentByReferenceStmt, err = db.PrepareContext(ctx, getHostedPaymentByReference); err != nil {
		return nil, fmt.Errorf("error preparing query GetHostedPaymentByReference: %w", err)
	}
	if q.getMerchantTransactionsStmt, err = db.PrepareContext(ctx, getMerchantTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetMerchantTransactions: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.getTransactionWithMerchantStmt, err = db.PrepareContext(ctx, getTransactionWithMerchant); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionWithMerchant: %w", err)
	}
	if q.getTransactionsStmt, err = db.PrepareContext(ctx, getTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactions: %w", err)
	}
	if q.getTransactionsByQRLinkStmt, err = db.PrepareContext(ctx, getTransactionsByQRLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionsByQRLink: %w", err)
	}
	if q.getTransactionsByStatusStmt, err = db.PrepareContext(ctx, getTransactionsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionsByStatus: %w", err)
	}
	if q.getTransactionsByTypeStmt, err = db.PrepareContext(ctx, getTransactionsByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionsByType: %w", err)
	}
	if q.getTransactionsWithPendingTipsStmt, err = db.PrepareContext(ctx, getTransactionsWithPendingTips); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionsWithPendingTips: %w", err)
	}
	if q.overrideTransactionStatusStmt, err = db.PrepareContext(ctx, overrideTransactionStatus); err != nil {
		return nil, fmt.Errorf("error preparing query OverrideTransactionStatus: %w", err)
	}
	if q.updateHostedPaymentStmt, err = db.PrepareContext(ctx, updateHostedPayment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHostedPayment: %w", err)
	}
	if q.updateHostedPaymentStatusStmt, err = db.PrepareContext(ctx, updateHostedPaymentStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHostedPaymentStatus: %w", err)
	}
	if q.updateHostedPaymentWithTransactionStmt, err = db.PrepareContext(ctx, updateHostedPaymentWithTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHostedPaymentWithTransaction: %w", err)
	}
	if q.updateStatusStmt, err = db.PrepareContext(ctx, updateStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatus: %w", err)
	}
	if q.updateTipProcessingStmt, err = db.PrepareContext(ctx, updateTipProcessing); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTipProcessing: %w", err)
	}
	if q.updateTransactionStmt, err = db.PrepareContext(ctx, updateTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransaction: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countTransactionsStmt != nil {
		if cerr := q.countTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTransactionsStmt: %w", cerr)
		}
	}
	if q.createHostedPaymentStmt != nil {
		if cerr := q.createHostedPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHostedPaymentStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createTransactionWithContextStmt != nil {
		if cerr := q.createTransactionWithContextStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionWithContextStmt: %w", cerr)
		}
	}
	if q.getByMerchantIdAndReferenceIDStmt != nil {
		if cerr := q.getByMerchantIdAndReferenceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByMerchantIdAndReferenceIDStmt: %w", cerr)
		}
	}
	if q.getByReferenceIDStmt != nil {
		if cerr := q.getByReferenceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByReferenceIDStmt: %w", cerr)
		}
	}
	if q.getByUserIdAndReferenceIDStmt != nil {
		if cerr := q.getByUserIdAndReferenceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByUserIdAndReferenceIDStmt: %w", cerr)
		}
	}
	if q.getExpiredHostedPaymentsStmt != nil {
		if cerr := q.getExpiredHostedPaymentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExpiredHostedPaymentsStmt: %w", cerr)
		}
	}
	if q.getFilteredMerchantTransactionsStmt != nil {
		if cerr := q.getFilteredMerchantTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilteredMerchantTransactionsStmt: %w", cerr)
		}
	}
	if q.getFilteredTransactionsStmt != nil {
		if cerr := q.getFilteredTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilteredTransactionsStmt: %w", cerr)
		}
	}
	if q.getHostedPaymentStmt != nil {
		if cerr := q.getHostedPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHostedPaymentStmt: %w", cerr)
		}
	}
	if q.getHostedPaymentByReferenceStmt != nil {
		if cerr := q.getHostedPaymentByReferenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHostedPaymentByReferenceStmt: %w", cerr)
		}
	}
	if q.getMerchantTransactionsStmt != nil {
		if cerr := q.getMerchantTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMerchantTransactionsStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.getTransactionWithMerchantStmt != nil {
		if cerr := q.getTransactionWithMerchantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionWithMerchantStmt: %w", cerr)
		}
	}
	if q.getTransactionsStmt != nil {
		if cerr := q.getTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsStmt: %w", cerr)
		}
	}
	if q.getTransactionsByQRLinkStmt != nil {
		if cerr := q.getTransactionsByQRLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsByQRLinkStmt: %w", cerr)
		}
	}
	if q.getTransactionsByStatusStmt != nil {
		if cerr := q.getTransactionsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsByStatusStmt: %w", cerr)
		}
	}
	if q.getTransactionsByTypeStmt != nil {
		if cerr := q.getTransactionsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsByTypeStmt: %w", cerr)
		}
	}
	if q.getTransactionsWithPendingTipsStmt != nil {
		if cerr := q.getTransactionsWithPendingTipsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsWithPendingTipsStmt: %w", cerr)
		}
	}
	if q.overrideTransactionStatusStmt != nil {
		if cerr := q.overrideTransactionStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing overrideTransactionStatusStmt: %w", cerr)
		}
	}
	if q.updateHostedPaymentStmt != nil {
		if cerr := q.updateHostedPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHostedPaymentStmt: %w", cerr)
		}
	}
	if q.updateHostedPaymentStatusStmt != nil {
		if cerr := q.updateHostedPaymentStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHostedPaymentStatusStmt: %w", cerr)
		}
	}
	if q.updateHostedPaymentWithTransactionStmt != nil {
		if cerr := q.updateHostedPaymentWithTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHostedPaymentWithTransactionStmt: %w", cerr)
		}
	}
	if q.updateStatusStmt != nil {
		if cerr := q.updateStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusStmt: %w", cerr)
		}
	}
	if q.updateTipProcessingStmt != nil {
		if cerr := q.updateTipProcessingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTipProcessingStmt: %w", cerr)
		}
	}
	if q.updateTransactionStmt != nil {
		if cerr := q.updateTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                     DBTX
	tx                                     *sql.Tx
	countTransactionsStmt                  *sql.Stmt
	createHostedPaymentStmt                *sql.Stmt
	createTransactionStmt                  *sql.Stmt
	createTransactionWithContextStmt       *sql.Stmt
	getByMerchantIdAndReferenceIDStmt      *sql.Stmt
	getByReferenceIDStmt                   *sql.Stmt
	getByUserIdAndReferenceIDStmt          *sql.Stmt
	getExpiredHostedPaymentsStmt           *sql.Stmt
	getFilteredMerchantTransactionsStmt    *sql.Stmt
	getFilteredTransactionsStmt            *sql.Stmt
	getHostedPaymentStmt                   *sql.Stmt
	getHostedPaymentByReferenceStmt        *sql.Stmt
	getMerchantTransactionsStmt            *sql.Stmt
	getTransactionStmt                     *sql.Stmt
	getTransactionWithMerchantStmt         *sql.Stmt
	getTransactionsStmt                    *sql.Stmt
	getTransactionsByQRLinkStmt            *sql.Stmt
	getTransactionsByStatusStmt            *sql.Stmt
	getTransactionsByTypeStmt              *sql.Stmt
	getTransactionsWithPendingTipsStmt     *sql.Stmt
	overrideTransactionStatusStmt          *sql.Stmt
	updateHostedPaymentStmt                *sql.Stmt
	updateHostedPaymentStatusStmt          *sql.Stmt
	updateHostedPaymentWithTransactionStmt *sql.Stmt
	updateStatusStmt                       *sql.Stmt
	updateTipProcessingStmt                *sql.Stmt
	updateTransactionStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		countTransactionsStmt:                  q.countTransactionsStmt,
		createHostedPaymentStmt:                q.createHostedPaymentStmt,
		createTransactionStmt:                  q.createTransactionStmt,
		createTransactionWithContextStmt:       q.createTransactionWithContextStmt,
		getByMerchantIdAndReferenceIDStmt:      q.getByMerchantIdAndReferenceIDStmt,
		getByReferenceIDStmt:                   q.getByReferenceIDStmt,
		getByUserIdAndReferenceIDStmt:          q.getByUserIdAndReferenceIDStmt,
		getExpiredHostedPaymentsStmt:           q.getExpiredHostedPaymentsStmt,
		getFilteredMerchantTransactionsStmt:    q.getFilteredMerchantTransactionsStmt,
		getFilteredTransactionsStmt:            q.getFilteredTransactionsStmt,
		getHostedPaymentStmt:                   q.getHostedPaymentStmt,
		getHostedPaymentByReferenceStmt:        q.getHostedPaymentByReferenceStmt,
		getMerchantTransactionsStmt:            q.getMerchantTransactionsStmt,
		getTransactionStmt:                     q.getTransactionStmt,
		getTransactionWithMerchantStmt:         q.getTransactionWithMerchantStmt,
		getTransactionsStmt:                    q.getTransactionsStmt,
		getTransactionsByQRLinkStmt:            q.getTransactionsByQRLinkStmt,
		getTransactionsByStatusStmt:            q.getTransactionsByStatusStmt,
		getTransactionsByTypeStmt:              q.getTransactionsByTypeStmt,
		getTransactionsWithPendingTipsStmt:     q.getTransactionsWithPendingTipsStmt,
		overrideTransactionStatusStmt:          q.overrideTransactionStatusStmt,
		updateHostedPaymentStmt:                q.updateHostedPaymentStmt,
		updateHostedPaymentStatusStmt:          q.updateHostedPaymentStatusStmt,
		updateHostedPaymentWithTransactionStmt: q.updateHostedPaymentWithTransactionStmt,
		updateStatusStmt:                       q.updateStatusStmt,
		updateTipProcessingStmt:                q.updateTipProcessingStmt,
		updateTransactionStmt:                  q.updateTransactionStmt,
	}
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/sqlc-dev/pqtype"
)

type HostedPaymentStatus string

const (
	HostedPaymentStatusPENDING   HostedPaymentStatus = "PENDING"
	HostedPaymentStatusCOMPLETED HostedPaymentStatus = "COMPLETED"
	HostedPaymentStatusEXPIRED   HostedPaymentStatus = "EXPIRED"
	HostedPaymentStatusCANCELED  HostedPaymentStatus = "CANCELED"
)

func (e *HostedPaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HostedPaymentStatus(s)
	case string:
		*e = HostedPaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for HostedPaymentStatus: %T", src)
	}
	return nil
}

type NullHostedPaymentStatus struct {
	HostedPaymentStatus HostedPaymentStatus `json:"hosted_payment_status"`
	Valid               bool                `json:"valid"` // Valid is true if HostedPaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHostedPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.HostedPaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HostedPaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHostedPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HostedPaymentStatus), nil
}

type QrLinkTag string

const (
	QrLinkTagRESTAURANT QrLinkTag = "RESTAURANT"
	QrLinkTagDONATION   QrLinkTag = "DONATION"
	QrLinkTagSHOP       QrLinkTag = "SHOP"
)

func (e *QrLinkTag) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QrLinkTag(s)
	case string:
		*e = QrLinkTag(s)
	default:
		return fmt.Errorf("unsupported scan type for QrLinkTag: %T", src)
	}
	return nil
}

type NullQrLinkTag struct {
	QrLinkTag QrLinkTag `json:"qr_link_tag"`
	Valid     bool      `json:"valid"` // Valid is true if QrLinkTag is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQrLinkTag) Scan(value interface{}) error {
	if value == nil {
		ns.QrLinkTag, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QrLinkTag.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQrLinkTag) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QrLinkTag), nil
}

type QrLinkType string

const (
	QrLinkTypeDYNAMIC QrLinkType = "DYNAMIC"
	QrLinkTypeSTATIC  QrLinkType = "STATIC"
)

func (e *QrLinkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QrLinkType(s)
	case string:
		*e = QrLinkType(s)
	default:
		return fmt.Errorf("unsupported scan type for QrLinkType: %T", src)
	}
	return nil
}

type NullQrLinkType struct {
	QrLinkType QrLinkType `json:"qr_link_type"`
	Valid      bool       `json:"valid"` // Valid is true if QrLinkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQrLinkType) Scan(value interface{}) error {
	if value == nil {
		ns.QrLinkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QrLinkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQrLinkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QrLinkType), nil
}

type TransactionSource string

const (
	TransactionSourceDIRECT         TransactionSource = "DIRECT"
	TransactionSourceHOSTEDCHECKOUT TransactionSource = "HOSTED_CHECKOUT"
	TransactionSourceQRPAYMENT      TransactionSource = "QR_PAYMENT"
	TransactionSourceWITHDRAWAL     TransactionSource = "WITHDRAWAL"
)

func (e *TransactionSource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionSource(s)
	case string:
		*e = TransactionSource(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionSource: %T", src)
	}
	return nil
}

type NullTransactionSource struct {
	TransactionSource TransactionSource `json:"transaction_source"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionSource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionSource) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionSource), nil
}

type TransactionStatus string

const (
	TransactionStatusINITIATED TransactionStatus = "INITIATED"
	TransactionStatusPENDING   TransactionStatus = "PENDING"
	TransactionStatusSUCCESS   TransactionStatus = "SUCCESS"
	TransactionStatusFAILED    TransactionStatus = "FAILED"
	TransactionStatusREFUNDED  TransactionStatus = "REFUNDED"
	TransactionStatusEXPIRED   TransactionStatus = "EXPIRED"
	TransactionStatusCANCELED  TransactionStatus = "CANCELED"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transaction_status"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type HostedPayment struct {
	ID                  uuid.UUID           `json:"id"`
	UserID              uuid.UUID           `json:"user_id"`
	MerchantID          uuid.UUID           `json:"merchant_id"`
	Amount              string              `json:"amount"`
	Currency            string              `json:"currency"`
	Description         sql.NullString      `json:"description"`
	Reference           string              `json:"reference"`
	SupportedMediums    json.RawMessage     `json:"supported_mediums"`
	PhoneNumber         sql.NullString      `json:"phone_number"`
	SuccessUrl          string              `json:"success_url"`
	FailedUrl           string              `json:"failed_url"`
	CallbackUrl         sql.NullString      `json:"callback_url"`
	Status              HostedPaymentStatus `json:"status"`
	TransactionID       uuid.NullUUID       `json:"transaction_id"`
	SelectedMedium      sql.NullString      `json:"selected_medium"`
	SelectedPhoneNumber sql.NullString      `json:"selected_phone_number"`
	MerchantPaysFee     bool                `json:"merchant_pays_fee"`
	AcceptTip           bool                `json:"accept_tip"`
	CreatedAt           time.Time           `json:"created_at"`
	UpdatedAt           time.Time           `json:"updated_at"`
	ExpiresAt           time.Time           `json:"expires_at"`
}

type MerchantsAddress struct {
	ID             uuid.UUID      `json:"id"`
	MerchantID     uuid.UUID      `json:"merchant_id"`
	AddressType    sql.NullString `json:"address_type"`
	StreetAddress1 sql.NullString `json:"street_address_1"`
	StreetAddress2 sql.NullString `json:"street_address_2"`
	City           sql.NullString `json:"city"`
	Region         sql.NullString `json:"region"`
	PostalCode     sql.NullString `json:"postal_code"`
	Country        sql.NullString `json:"country"`
	IsPrimary      sql.NullBool   `json:"is_primary"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
}

type MerchantsBankAccount struct {
	ID                     uuid.UUID      `json:"id"`
	MerchantID             uuid.UUID      `json:"merchant_id"`
	AccountHolderName      string         `json:"account_holder_name"`
	BankName               string         `json:"bank_name"`
	BankCode               string         `json:"bank_code"`
	BranchCode             sql.NullString `json:"branch_code"`
	AccountNumber          string         `json:"account_number"`
	AccountType            string         `json:"account_type"`
	Currency               string         `json:"currency"`
	IsPrimary              sql.NullBool   `json:"is_primary"`
	IsVerified             sql.NullBool   `json:"is_verified"`
	VerificationDocumentID uuid.NullUUID  `json:"verification_document_id"`
	CreatedAt              time.Time      `json:"created_at"`
	UpdatedAt              time.Time      `json:"updated_at"`
}

type MerchantsContact struct {
	ID          uuid.UUID      `json:"id"`
	MerchantID  uuid.UUID      `json:"merchant_id"`
	ContactType string         `json:"contact_type"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       string         `json:"email"`
	PhoneNumber string         `json:"phone_number"`
	Position    sql.NullString `json:"position"`
	IsVerified  sql.NullBool   `json:"is_verified"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type MerchantsDocument struct {
	ID              uuid.UUID      `json:"id"`
	MerchantID      uuid.UUID      `json:"merchant_id"`
	DocumentType    string         `json:"document_type"`
	DocumentNumber  sql.NullString `json:"document_number"`
	FileUrl         string         `json:"file_url"`
	FileHash        sql.NullString `json:"file_hash"`
	VerifiedBy      uuid.NullUUID  `json:"verified_by"`
	VerifiedAt      sql.NullTime   `json:"verified_at"`
	Status          string         `json:"status"`
	RejectionReason sql.NullString `json:"rejection_reason"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

type MerchantsMerchant struct {
	ID                         uuid.UUID      `json:"id"`
	UserID                     uuid.UUID      `json:"user_id"`
	LegalName                  string         `json:"legal_name"`
	TradingName                sql.NullString `json:"trading_name"`
	BusinessRegistrationNumber string         `json:"business_registration_number"`
	TaxIdentificationNumber    string         `json:"tax_identification_number"`
	BusinessType               string         `json:"business_type"`
	IndustryCategory           sql.NullString `json:"industry_category"`
	IsBettingCompany           sql.NullBool   `json:"is_betting_company"`
	LotteryCertificateNumber   sql.NullString `json:"lottery_certificate_number"`
	WebsiteUrl                 sql.NullString `json:"website_url"`
	EstablishedDate            sql.NullTime   `json:"established_date"`
	CreatedAt                  time.Time      `json:"created_at"`
	UpdatedAt                  time.Time      `json:"updated_at"`
	DeletedAt                  sql.NullTime   `json:"deleted_at"`
	Status                     string         `json:"status"`
}

type MerchantsSetting struct {
	MerchantID          uuid.UUID             `json:"merchant_id"`
	DefaultCurrency     string                `json:"default_currency"`
	DefaultLanguage     string                `json:"default_language"`
	CheckoutTheme       sql.NullString        `json:"checkout_theme"`
	EnableWebhooks      sql.NullBool          `json:"enable_webhooks"`
	WebhookUrl          sql.NullString        `json:"webhook_url"`
	WebhookSecret       sql.NullString        `json:"webhook_secret"`
	AutoSettlement      sql.NullBool          `json:"auto_settlement"`
	SettlementFrequency sql.NullString        `json:"settlement_frequency"`
	RiskSettings        pqtype.NullRawMessage `json:"risk_settings"`
	CreatedAt           time.Time             `json:"created_at"`
	UpdatedAt           time.Time             `json:"updated_at"`
}

type QrLink struct {
	ID               uuid.UUID       `json:"id"`
	UserID           uuid.UUID       `json:"user_id"`
	MerchantID       uuid.UUID       `json:"merchant_id"`
	Type             QrLinkType      `json:"type"`
	Amount           sql.NullString  `json:"amount"`
	SupportedMethods json.RawMessage `json:"supported_methods"`
	Tag              QrLinkTag       `json:"tag"`
	Title            sql.NullString  `json:"title"`
	Description      sql.NullString  `json:"description"`
	ImageUrl         sql.NullString  `json:"image_url"`
	IsTipEnabled     sql.NullBool    `json:"is_tip_enabled"`
	IsActive         sql.NullBool    `json:"is_active"`
	CreatedAt        time.Time       `json:"created_at"`
	UpdatedAt        time.Time       `json:"updated_at"`
}

type Transaction struct {
	ID                uuid.UUID             `json:"id"`
	PhoneNumber       sql.NullString        `json:"phone_number"`
	UserID            uuid.UUID             `json:"user_id"`
	MerchantID        uuid.NullUUID         `json:"merchant_id"`
	Type              string                `json:"type"`
	Medium            string                `json:"medium"`
	Reference         sql.NullString        `json:"reference"`
	Comment           sql.NullString        `json:"comment"`
	ReferenceNumber   sql.NullString        `json:"reference_number"`
	Description       sql.NullString        `json:"description"`
	Verified          sql.NullBool          `json:"verified"`
	Status            TransactionStatus     `json:"status"`
	Test              sql.NullBool          `json:"test"`
	HasChallenge      sql.NullBool          `json:"has_challenge"`
	WebhookReceived   sql.NullBool          `json:"webhook_received"`
	Ttl               sql.NullInt64         `json:"ttl"`
	CreatedAt         time.Time             `json:"created_at"`
	UpdatedAt         time.Time             `json:"updated_at"`
	ConfirmTimestamp  sql.NullTime          `json:"confirm_timestamp"`
	BaseAmount        decimal.Decimal       `json:"base_amount"`
	FeeAmount         decimal.NullDecimal   `json:"fee_amount"`
	AdminNet          decimal.NullDecimal   `json:"admin_net"`
	VatAmount         decimal.NullDecimal   `json:"vat_amount"`
	MerchantNet       decimal.NullDecimal   `json:"merchant_net"`
	CustomerNet       decimal.NullDecimal   `json:"customer_net"`
	TotalAmount       decimal.NullDecimal   `json:"total_amount"`
	Currency          sql.NullString        `json:"currency"`
	Details           pqtype.NullRawMessage `json:"details"`
	Token             sql.NullString        `json:"token"`
	ProviderTxID      sql.NullString        `json:"provider_tx_id"`
	ProviderData      pqtype.NullRawMessage `json:"provider_data"`
	MerchantPaysFee   sql.NullBool          `json:"merchant_pays_fee"`
	CallbackUrl       sql.NullString        `json:"callback_url"`
	SuccessUrl        sql.NullString        `json:"success_url"`
	FailedUrl         sql.NullString        `json:"failed_url"`
	TransactionSource NullTransactionSource `json:"transaction_source"`
	QrLinkID          uuid.NullUUID         `json:"qr_link_id"`
	HostedCheckoutID  uuid.NullUUID         `json:"hosted_checkout_id"`
	QrTag             sql.NullString        `json:"qr_tag"`
	HasTip            sql.NullBool          `json:"has_tip"`
	TipAmount         sql.NullString        `json:"tip_amount"`
	TipeePhone        sql.NullString        `json:"tipee_phone"`
	TipMedium         sql.NullString        `json:"tip_medium"`
	TipTransactionID  uuid.NullUUID         `json:"tip_transaction_id"`
	TipProcessed      sql.NullBool          `json:"tip_processed"`
}

type TransactionStatusOverride struct {
	ID            uuid.UUID `json:"id"`
	TransactionID uuid.UUID `json:"transaction_id"`
	Reason        string    `json:"reason"`
	AdminID       uuid.UUID `json:"admin_id"`
	CreatedAt     time.Time `json:"created_at"`
}

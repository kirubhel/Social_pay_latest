// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCallbackLogStmt, err = db.PrepareContext(ctx, createCallbackLog); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCallbackLog: %w", err)
	}
	if q.getAllCallbackLogsStmt, err = db.PrepareContext(ctx, getAllCallbackLogs); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCallbackLogs: %w", err)
	}
	if q.getCallbackLogByIDStmt, err = db.PrepareContext(ctx, getCallbackLogByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCallbackLogByID: %w", err)
	}
	if q.getCallbackLogsByMerchantIDStmt, err = db.PrepareContext(ctx, getCallbackLogsByMerchantID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCallbackLogsByMerchantID: %w", err)
	}
	if q.getCallbackLogsByStatusStmt, err = db.PrepareContext(ctx, getCallbackLogsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetCallbackLogsByStatus: %w", err)
	}
	if q.getCallbackLogsByTransactionIDStmt, err = db.PrepareContext(ctx, getCallbackLogsByTransactionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCallbackLogsByTransactionID: %w", err)
	}
	if q.updateCallbackLogStmt, err = db.PrepareContext(ctx, updateCallbackLog); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCallbackLog: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCallbackLogStmt != nil {
		if cerr := q.createCallbackLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCallbackLogStmt: %w", cerr)
		}
	}
	if q.getAllCallbackLogsStmt != nil {
		if cerr := q.getAllCallbackLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCallbackLogsStmt: %w", cerr)
		}
	}
	if q.getCallbackLogByIDStmt != nil {
		if cerr := q.getCallbackLogByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCallbackLogByIDStmt: %w", cerr)
		}
	}
	if q.getCallbackLogsByMerchantIDStmt != nil {
		if cerr := q.getCallbackLogsByMerchantIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCallbackLogsByMerchantIDStmt: %w", cerr)
		}
	}
	if q.getCallbackLogsByStatusStmt != nil {
		if cerr := q.getCallbackLogsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCallbackLogsByStatusStmt: %w", cerr)
		}
	}
	if q.getCallbackLogsByTransactionIDStmt != nil {
		if cerr := q.getCallbackLogsByTransactionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCallbackLogsByTransactionIDStmt: %w", cerr)
		}
	}
	if q.updateCallbackLogStmt != nil {
		if cerr := q.updateCallbackLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCallbackLogStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	createCallbackLogStmt              *sql.Stmt
	getAllCallbackLogsStmt             *sql.Stmt
	getCallbackLogByIDStmt             *sql.Stmt
	getCallbackLogsByMerchantIDStmt    *sql.Stmt
	getCallbackLogsByStatusStmt        *sql.Stmt
	getCallbackLogsByTransactionIDStmt *sql.Stmt
	updateCallbackLogStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		createCallbackLogStmt:              q.createCallbackLogStmt,
		getAllCallbackLogsStmt:             q.getAllCallbackLogsStmt,
		getCallbackLogByIDStmt:             q.getCallbackLogByIDStmt,
		getCallbackLogsByMerchantIDStmt:    q.getCallbackLogsByMerchantIDStmt,
		getCallbackLogsByStatusStmt:        q.getCallbackLogsByStatusStmt,
		getCallbackLogsByTransactionIDStmt: q.getCallbackLogsByTransactionIDStmt,
		updateCallbackLogStmt:              q.updateCallbackLogStmt,
	}
}

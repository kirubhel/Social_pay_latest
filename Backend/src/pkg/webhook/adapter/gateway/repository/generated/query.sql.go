// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCallbackLog = `-- name: CreateCallbackLog :exec
INSERT INTO webhook.callback_logs (
    id, user_id, txn_id, merchant_id, status, request_body, response_body, retry_count, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW()
)
`

type CreateCallbackLogParams struct {
	ID           uuid.UUID      `json:"id"`
	UserID       uuid.UUID      `json:"user_id"`
	TxnID        uuid.UUID      `json:"txn_id"`
	MerchantID   uuid.UUID      `json:"merchant_id"`
	Status       int32          `json:"status"`
	RequestBody  string         `json:"request_body"`
	ResponseBody sql.NullString `json:"response_body"`
	RetryCount   int32          `json:"retry_count"`
}

func (q *Queries) CreateCallbackLog(ctx context.Context, arg CreateCallbackLogParams) error {
	_, err := q.exec(ctx, q.createCallbackLogStmt, createCallbackLog,
		arg.ID,
		arg.UserID,
		arg.TxnID,
		arg.MerchantID,
		arg.Status,
		arg.RequestBody,
		arg.ResponseBody,
		arg.RetryCount,
	)
	return err
}

const getAllCallbackLogs = `-- name: GetAllCallbackLogs :many
SELECT id, user_id, txn_id, merchant_id, status, request_body, response_body, retry_count, created_at, updated_at FROM webhook.callback_logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllCallbackLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllCallbackLogs(ctx context.Context, arg GetAllCallbackLogsParams) ([]WebhookCallbackLog, error) {
	rows, err := q.query(ctx, q.getAllCallbackLogsStmt, getAllCallbackLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhookCallbackLog{}
	for rows.Next() {
		var i WebhookCallbackLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TxnID,
			&i.MerchantID,
			&i.Status,
			&i.RequestBody,
			&i.ResponseBody,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCallbackLogByID = `-- name: GetCallbackLogByID :one
SELECT id, user_id, txn_id, merchant_id, status, request_body, response_body, retry_count, created_at, updated_at FROM webhook.callback_logs
WHERE id = $1
`

func (q *Queries) GetCallbackLogByID(ctx context.Context, id uuid.UUID) (WebhookCallbackLog, error) {
	row := q.queryRow(ctx, q.getCallbackLogByIDStmt, getCallbackLogByID, id)
	var i WebhookCallbackLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TxnID,
		&i.MerchantID,
		&i.Status,
		&i.RequestBody,
		&i.ResponseBody,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCallbackLogsByMerchantID = `-- name: GetCallbackLogsByMerchantID :many
SELECT id, user_id, txn_id, merchant_id, status, request_body, response_body, retry_count, created_at, updated_at FROM webhook.callback_logs
WHERE merchant_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetCallbackLogsByMerchantIDParams struct {
	MerchantID uuid.UUID `json:"merchant_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) GetCallbackLogsByMerchantID(ctx context.Context, arg GetCallbackLogsByMerchantIDParams) ([]WebhookCallbackLog, error) {
	rows, err := q.query(ctx, q.getCallbackLogsByMerchantIDStmt, getCallbackLogsByMerchantID, arg.MerchantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhookCallbackLog{}
	for rows.Next() {
		var i WebhookCallbackLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TxnID,
			&i.MerchantID,
			&i.Status,
			&i.RequestBody,
			&i.ResponseBody,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCallbackLogsByStatus = `-- name: GetCallbackLogsByStatus :many
SELECT id, user_id, txn_id, merchant_id, status, request_body, response_body, retry_count, created_at, updated_at FROM webhook.callback_logs
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCallbackLogsByStatus(ctx context.Context, status int32) ([]WebhookCallbackLog, error) {
	rows, err := q.query(ctx, q.getCallbackLogsByStatusStmt, getCallbackLogsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhookCallbackLog{}
	for rows.Next() {
		var i WebhookCallbackLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TxnID,
			&i.MerchantID,
			&i.Status,
			&i.RequestBody,
			&i.ResponseBody,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCallbackLogsByTransactionID = `-- name: GetCallbackLogsByTransactionID :many
SELECT id, user_id, txn_id, merchant_id, status, request_body, response_body, retry_count, created_at, updated_at FROM webhook.callback_logs
WHERE txn_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCallbackLogsByTransactionID(ctx context.Context, txnID uuid.UUID) ([]WebhookCallbackLog, error) {
	rows, err := q.query(ctx, q.getCallbackLogsByTransactionIDStmt, getCallbackLogsByTransactionID, txnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhookCallbackLog{}
	for rows.Next() {
		var i WebhookCallbackLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TxnID,
			&i.MerchantID,
			&i.Status,
			&i.RequestBody,
			&i.ResponseBody,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCallbackLog = `-- name: UpdateCallbackLog :exec
UPDATE webhook.callback_logs
SET status = $2,
    response_body = $3,
    retry_count = $4,
    updated_at = NOW()
WHERE id = $1
`

type UpdateCallbackLogParams struct {
	ID           uuid.UUID      `json:"id"`
	Status       int32          `json:"status"`
	ResponseBody sql.NullString `json:"response_body"`
	RetryCount   int32          `json:"retry_count"`
}

func (q *Queries) UpdateCallbackLog(ctx context.Context, arg UpdateCallbackLogParams) error {
	_, err := q.exec(ctx, q.updateCallbackLogStmt, updateCallbackLog,
		arg.ID,
		arg.Status,
		arg.ResponseBody,
		arg.RetryCount,
	)
	return err
}

{
    "swagger": "2.0",
    "info": {
        "description": "Social Pay API V2 documentation",
        "title": "Social Pay API V2",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@socialpay.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v2",
    "paths": {
        "/checkout/makepayment": {
            "post": {
                "description": "Process payment from hosted checkout page with selected medium and phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Process payment from hosted checkout",
                "parameters": [
                    {
                        "description": "Checkout payment request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CheckoutPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/checkout/{id}": {
            "get": {
                "description": "Retrieve hosted checkout details by ID for the checkout page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Get hosted checkout details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hosted Checkout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.HostedCheckoutWithMerchantResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all API keys for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "List API keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.APIKeyResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new API key for a merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Create API key",
                "parameters": [
                    {
                        "description": "API key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keys/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an API key by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Get API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing API key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Delete API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Update API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "API key update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keys/{id}/rotate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a new secret for an API key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Rotate API key secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyRotateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/{id}": {
            "get": {
                "description": "Get a merchant by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Get merchant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/{id}/details": {
            "get": {
                "description": "Get complete merchant information with related data by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Get merchant details by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/checkout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a hosted checkout session for payment processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Create hosted checkout",
                "parameters": [
                    {
                        "description": "Hosted checkout request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.HostedCheckoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/checkout/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update hosted checkout details (only allowed when status is PENDING and not expired)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Update hosted checkout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hosted Checkout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateHostedCheckoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/direct": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process a direct payment transaction with the specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Process a direct payment",
                "parameters": [
                    {
                        "description": "Payment request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.DirectPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/receipt/{id}": {
            "get": {
                "description": "Retrieve details of a specific transaction by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transaction details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.TransactionResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/transaction/{id}": {
            "get": {
                "description": "Retrieve details of a specific transaction by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transaction details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.TransactionResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/withdrawal": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process a withdrawal request for the specified amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Request a withdrawal",
                "parameters": [
                    {
                        "description": "Withdrawal request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.WithdrawalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/public/keys/validate": {
            "post": {
                "description": "Validate an API key with public and secret keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Validate API key",
                "parameters": [
                    {
                        "description": "API key validate request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr/callback": {
            "post": {
                "description": "Handle callback from payment processors for QR payments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Handle QR payment callback",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/qr/payment/link/{id}": {
            "get": {
                "description": "Get QR link details for payment processing (public endpoint)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Get QR link for payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Process a payment using QR link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Process QR payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "QR payment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.QRPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_core_entity.QRPaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr/payment/merchant": {
            "post": {
                "description": "Process a QR payment transaction from checkout page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Process a QR payment for merchant",
                "parameters": [
                    {
                        "description": "QR Payment request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.QRMerchantPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_core_entity.QRPaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr_mgmt/links": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of QR payment links for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Get QR payment links",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 10)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinksListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new QR payment link for merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Create QR payment link",
                "parameters": [
                    {
                        "description": "QR link creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateQRLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr_mgmt/links/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get QR payment link details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Get QR payment link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing QR payment link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Update QR payment link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "QR link update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateQRLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete (deactivate) a QR payment link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Delete QR payment link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/awash": {
            "post": {
                "description": "Process Awash settlement callback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle Awash settlement",
                "parameters": [
                    {
                        "description": "Awash settlement callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.AwashCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/cbe": {
            "post": {
                "description": "Process CBE payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle CBE payment settlement",
                "parameters": [
                    {
                        "description": "CBE callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.STDCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/cybersource": {
            "post": {
                "description": "Process Cybersource payment callback and update transaction status",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle Cybersource payment settlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction UUID",
                        "name": "req_transaction_uuid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reason code from Cybersource",
                        "name": "reason_code",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Decision from Cybersource (ACCEPT/DECLINE/CANCEL)",
                        "name": "decision",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List of signed fields",
                        "name": "signed_field_names",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request signature",
                        "name": "signature",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/epg/payment": {
            "post": {
                "description": "process the ethswtich callback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle the ethswitch settlemnet",
                "parameters": [
                    {
                        "description": "ethswitch callback body",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.EthSwitchCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/mpesa": {
            "post": {
                "description": "Process M-PESA payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle M-PESA payment settlement",
                "parameters": [
                    {
                        "description": "M-PESA callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.MPESACallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/std": {
            "post": {
                "description": "Process payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle payment settlement",
                "parameters": [
                    {
                        "description": "Settlement callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.STDCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/telebirr": {
            "post": {
                "description": "Process Telebirr payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle Telebirr payment settlement",
                "parameters": [
                    {
                        "description": "Telebirr callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.TelebirrCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/analytics": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get aggregated transaction analytics with filters and period comparison",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction analytics",
                "parameters": [
                    {
                        "description": "Analytics filter parameters",
                        "name": "analyticsFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.AnalyticsFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.TransactionAnalytics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/chart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get chart data for transaction analytics with date aggregation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction chart data",
                "parameters": [
                    {
                        "description": "Chart filter parameters",
                        "name": "chartFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ChartFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ChartData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/data/export": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "export the transaction data with pdf format. Use date format YYYY-MM-DD (e.g. 2023-01-01)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "exporting transaction data",
                "parameters": [
                    {
                        "description": "request body with date format YYYY-MM-DD",
                        "name": "filterParameter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.FilterParameters"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transactions/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get transacton history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "get transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get transacton history with given specific parameter. Use date format YYYY-MM-DD (e.g. 2023-01-01)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "get transaction by specific filter parameter",
                "parameters": [
                    {
                        "description": "request body with date format YYYY-MM-DD",
                        "name": "filterParameter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.FilterParameters"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/override/{transactionID}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Override the status of a transaction with admin approval",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Override transaction status",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Transaction ID",
                        "name": "transactionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New status (INITIATED, PENDING, SUCCESS, FAILED, REFUNDED, EXPIRED, CANCELED)",
                        "name": "status",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reason for override (minimum 10 characters)",
                        "name": "reason",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Admin ID",
                        "name": "adminID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "MerchantID": []
                    }
                ],
                "description": "Get the wallet information for the authenticated merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get merchant wallet",
                "responses": {
                    "200": {
                        "description": "Wallet information",
                        "schema": {
                            "$ref": "#/definitions/controller.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Wallet Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/webhooks/callback": {
            "get": {
                "description": "Retrieves all callback logs ordered by creation date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get all callback logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (min: 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (min: 1, max: 100)",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.CallbackLog"
                            }
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Receives a webhook callback and produces an event to Kafka",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Receive webhook callback",
                "parameters": [
                    {
                        "description": "Webhook callback payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.WebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status: success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/callback/merchant": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all callback logs for the merchant associated with the API key. The merchant ID is automatically determined from the API key context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get callback logs for authenticated merchant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public API Key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Secret API Key",
                        "name": "X-API-Secret",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.CallbackLog"
                            }
                        }
                    },
                    "400": {
                        "description": "error: invalid merchant ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/callback/{id}": {
            "get": {
                "description": "Retrieves a specific callback log by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get callback log by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Callback Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.CallbackLog"
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.ErrorResponse": {
            "description": "Error response",
            "type": "object",
            "properties": {
                "error": {
                    "description": "@Description Error message",
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "controller.WalletResponse": {
            "description": "Wallet information response",
            "type": "object",
            "properties": {
                "balance": {
                    "description": "@Description Current balance in the wallet",
                    "type": "number",
                    "example": 1000.5
                },
                "created_at": {
                    "description": "@Description When the wallet was created",
                    "type": "string",
                    "example": "2024-05-22T09:00:00Z"
                },
                "currency": {
                    "description": "@Description Currency code",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "@Description Optional description of the wallet",
                    "type": "string",
                    "example": "Main merchant wallet"
                },
                "id": {
                    "description": "@Description Unique identifier for the wallet",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_active": {
                    "description": "@Description Whether the wallet is active",
                    "type": "boolean",
                    "example": true
                },
                "last_sync_at": {
                    "description": "@Description When the wallet was last synchronized",
                    "type": "string",
                    "example": "2024-05-22T09:00:00Z"
                },
                "merchant_id": {
                    "description": "@Description ID of the merchant who owns this wallet",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "updated_at": {
                    "description": "@Description When the wallet was last updated",
                    "type": "string",
                    "example": "2024-05-22T09:00:00Z"
                }
            }
        },
        "dto.WebhookRequest": {
            "type": "object",
            "required": [
                "callbackUrl",
                "merchantId",
                "message",
                "status",
                "timestamp",
                "transactionId",
                "userId"
            ],
            "properties": {
                "callbackUrl": {
                    "type": "string"
                },
                "isHostedCheckout": {
                    "type": "boolean"
                },
                "merchantId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "providerData": {
                    "type": "string"
                },
                "providerTxId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "entity.APIKeyResponse": {
            "type": "object",
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_used_at": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.APIKeyRotateResponse": {
            "type": "object",
            "properties": {
                "api_key": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_core_entity.APIKey"
                },
                "secret_key": {
                    "type": "string"
                }
            }
        },
        "entity.APIKeyValidateRequest": {
            "type": "object",
            "required": [
                "public_key",
                "secret_key"
            ],
            "properties": {
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                }
            }
        },
        "entity.AnalyticsFilter": {
            "description": "Parameters for filtering transaction analytics data",
            "type": "object",
            "required": [
                "end_date",
                "start_date"
            ],
            "properties": {
                "amount_max": {
                    "type": "number"
                },
                "amount_min": {
                    "description": "@Description Amount range filter",
                    "type": "number"
                },
                "end_date": {
                    "description": "@Description End date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-12-31",
                    "type": "string"
                },
                "medium": {
                    "description": "@Description Payment medium filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "merchant_id": {
                    "description": "@Description Merchant ID filter (for admin analytics)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "qr_tag": {
                    "description": "@Description QR tag filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "description": "@Description Transaction source filter (QR, DIRECT, HOSTED_CHECKOUT)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.TransactionSource"
                    }
                },
                "start_date": {
                    "description": "@Description Start date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-01-01",
                    "type": "string"
                },
                "status": {
                    "description": "@Description Transaction status filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                    }
                },
                "type": {
                    "description": "@Description Transaction type filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                    }
                }
            }
        },
        "entity.CallbackLog": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "request_body": {
                    "type": "string"
                },
                "response_body": {
                    "type": "string"
                },
                "retry_count": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "txn_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.ChartData": {
            "description": "Chart data for transaction analytics",
            "type": "object",
            "properties": {
                "chart_type": {
                    "type": "string"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.ChartDataPoint"
                    }
                },
                "date_unit": {
                    "$ref": "#/definitions/entity.DateUnit"
                },
                "summary": {
                    "$ref": "#/definitions/entity.ChartSummary"
                }
            }
        },
        "entity.ChartDataPoint": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "entity.ChartFilter": {
            "description": "Parameters for generating chart data",
            "type": "object",
            "required": [
                "chart_type",
                "date_unit",
                "end_date",
                "start_date"
            ],
            "properties": {
                "amount_max": {
                    "type": "number"
                },
                "amount_min": {
                    "description": "@Description Amount range filter",
                    "type": "number"
                },
                "chart_type": {
                    "description": "@Description Chart type: \"amount\" for transaction amounts, \"count\" for transaction counts",
                    "type": "string"
                },
                "date_unit": {
                    "description": "@Description Date unit for chart aggregation (day, week, month, year)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.DateUnit"
                        }
                    ]
                },
                "end_date": {
                    "description": "@Description End date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-12-31",
                    "type": "string"
                },
                "medium": {
                    "description": "@Description Payment medium filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "merchant_id": {
                    "description": "@Description Merchant ID filter (for admin analytics)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "qr_tag": {
                    "description": "@Description QR tag filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "description": "@Description Transaction source filter (QR, DIRECT, HOSTED_CHECKOUT)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.TransactionSource"
                    }
                },
                "start_date": {
                    "description": "@Description Start date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-01-01",
                    "type": "string"
                },
                "status": {
                    "description": "@Description Transaction status filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                    }
                },
                "type": {
                    "description": "@Description Transaction type filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                    }
                }
            }
        },
        "entity.ChartSummary": {
            "type": "object",
            "properties": {
                "average_value": {
                    "type": "number"
                },
                "data_points": {
                    "type": "integer"
                },
                "max_value": {
                    "type": "number"
                },
                "min_value": {
                    "type": "number"
                },
                "total_value": {
                    "type": "number"
                }
            }
        },
        "entity.CheckoutPaymentRequest": {
            "description": "Payment request from hosted checkout page",
            "type": "object",
            "properties": {
                "hosted_checkout_id": {
                    "description": "Hosted checkout ID\n@Example 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "medium": {
                    "description": "Selected payment medium\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA,ETHSWITCH"
                },
                "phone_number": {
                    "description": "Phone number for payment\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                }
            }
        },
        "entity.CreateAPIKeyRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "$ref": "#/definitions/entity.CustomTime"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.CreateQRLinkRequest": {
            "description": "Request to create a new QR payment link",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount for STATIC type QR links",
                    "type": "number",
                    "example": 100.5
                },
                "description": {
                    "description": "Optional description",
                    "type": "string",
                    "example": "Payment for shop items"
                },
                "image_url": {
                    "description": "Optional image URL",
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "is_tip_enabled": {
                    "description": "Whether tipping is enabled",
                    "type": "boolean",
                    "example": true
                },
                "supported_methods": {
                    "description": "Supported payment methods",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        "\"TELEBIRR\"]"
                    ]
                },
                "tag": {
                    "description": "QR link category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.QRLinkTag"
                        }
                    ],
                    "example": "SHOP"
                },
                "title": {
                    "description": "Optional title",
                    "type": "string",
                    "example": "My Shop Payment"
                },
                "type": {
                    "description": "Type of QR link (DYNAMIC or STATIC)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.QRLinkType"
                        }
                    ],
                    "example": "DYNAMIC"
                }
            }
        },
        "entity.CustomTime": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        },
        "entity.DataFormat": {
            "type": "string",
            "enum": [
                "pdf"
            ],
            "x-enum-varnames": [
                "FORMATPDF"
            ]
        },
        "entity.DateUnit": {
            "type": "string",
            "enum": [
                "day",
                "week",
                "month",
                "year"
            ],
            "x-enum-varnames": [
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
            ]
        },
        "entity.DirectPaymentRequest": {
            "description": "Payment request details for processing a direct payment",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "details": {
                    "description": "Additional payment details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionDetails"
                        }
                    ]
                },
                "medium": {
                    "description": "Payment medium/provider to use\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "phone_number": {
                    "description": "Phone number to be paid\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "redirects": {
                    "description": "URLs for payment redirects",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionRedirects"
                        }
                    ]
                },
                "reference": {
                    "description": "Merchant ID\n@Example 1234567890",
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "entity.FilterParameters": {
            "description": "Parameters for filtering transaction data",
            "type": "object",
            "properties": {
                "Socialpay_tx_id": {
                    "description": "Searching",
                    "type": "string"
                },
                "end_date": {
                    "description": "@Description End date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-12-31",
                    "type": "string"
                },
                "format": {
                    "$ref": "#/definitions/entity.DataFormat"
                },
                "medium": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                },
                "provider_tx_id": {
                    "description": "optional",
                    "type": "string"
                },
                "reference_id": {
                    "description": "optional",
                    "type": "string"
                },
                "sort": {
                    "description": "Sort\n@Description ASC or DESC",
                    "type": "string"
                },
                "start_date": {
                    "description": "@Description Start date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-01-01",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                },
                "type": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                }
            }
        },
        "entity.HostedCheckoutRequest": {
            "description": "Hosted checkout request details for creating a payment link",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "expires_at": {
                    "description": "Optional expiry date time in UTC (ISO 8601 format)\n@Example 2024-12-31T23:59:59Z",
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "phone_number": {
                    "description": "Optional phone number (can be pre-filled)\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "redirects": {
                    "description": "URLs for payment redirects",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionRedirects"
                        }
                    ]
                },
                "reference": {
                    "description": "Merchant reference\n@Example ORDER123456",
                    "type": "string",
                    "example": "ORDER123456"
                },
                "supported_mediums": {
                    "description": "Supported payment mediums\n@Example [\"MPESA\", \"TELEBIRR\", \"CBE\"]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        " \"TELEBIRR\"",
                        " \"CBE\"",
                        "\"ETHSWITCH\"]"
                    ]
                }
            }
        },
        "entity.HostedCheckoutWithMerchantResponseDTO": {
            "description": "Response containing hosted checkout information and merchant details for the checkout page",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Payment details",
                    "type": "number",
                    "example": 1000.5
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-05-03T10:00:00Z"
                },
                "currency": {
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-05-04T10:00:00Z"
                },
                "failed_url": {
                    "type": "string",
                    "example": "https://example.com/failed"
                },
                "id": {
                    "description": "Unique identifier for the hosted checkout",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "merchant": {
                    "description": "Merchant information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.Merchant"
                        }
                    ]
                },
                "phone_number": {
                    "description": "Optional pre-filled phone number",
                    "type": "string",
                    "example": "251911111111"
                },
                "reference": {
                    "type": "string",
                    "example": "ORDER123456"
                },
                "status": {
                    "description": "Status and timestamps",
                    "type": "string",
                    "example": "PENDING"
                },
                "success_url": {
                    "description": "URLs for redirects",
                    "type": "string",
                    "example": "https://example.com/success"
                },
                "supported_mediums": {
                    "description": "Supported payment mediums",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        " \"TELEBIRR\"",
                        " \"CBE\"]"
                    ]
                }
            }
        },
        "entity.PaymentResponse": {
            "description": "Response containing payment processing results",
            "type": "object",
            "properties": {
                "Socialpay_transaction_id": {
                    "description": "Socialpay transaction ID",
                    "type": "string",
                    "example": "1234567890"
                },
                "message": {
                    "description": "Human-readable message about the operation",
                    "type": "string",
                    "example": "Payment initiated successfully"
                },
                "payment_url": {
                    "description": "URL to redirect the user for payment (if applicable)",
                    "type": "string",
                    "example": "https://pay.example.com/checkout"
                },
                "reference_id": {
                    "description": "Unique payment reference",
                    "type": "string",
                    "example": "PAY123456789"
                },
                "status": {
                    "description": "Status of the payment",
                    "type": "string",
                    "example": "PENDING"
                },
                "success": {
                    "description": "Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "entity.PeriodComparison": {
            "type": "object",
            "properties": {
                "amount_change": {
                    "type": "number"
                },
                "merchant_net_change": {
                    "type": "number"
                },
                "transaction_count_change": {
                    "type": "number"
                }
            }
        },
        "entity.QRLinkResponse": {
            "description": "Response containing QR link details",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Only for STATIC type",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_tip_enabled": {
                    "type": "boolean"
                },
                "merchant_id": {
                    "type": "string"
                },
                "payment_url": {
                    "description": "Payment URL for the QR link",
                    "type": "string",
                    "example": "https://checkout.Socialpay.co/qr/123e4567-e89b-12d3-a456-426614174000"
                },
                "qr_code_url": {
                    "description": "URL to display QR code",
                    "type": "string",
                    "example": "https://api.Socialpay.co/qr/display/123e4567-e89b-12d3-a456-426614174000"
                },
                "supported_methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "tag": {
                    "$ref": "#/definitions/entity.QRLinkTag"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/entity.QRLinkType"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.QRLinkTag": {
            "type": "string",
            "enum": [
                "RESTAURANT",
                "DONATION",
                "SHOP"
            ],
            "x-enum-varnames": [
                "RESTAURANT",
                "DONATION",
                "SHOP"
            ]
        },
        "entity.QRLinkType": {
            "type": "string",
            "enum": [
                "DYNAMIC",
                "STATIC"
            ],
            "x-enum-varnames": [
                "DYNAMIC",
                "STATIC"
            ]
        },
        "entity.QRLinksListResponse": {
            "description": "Paginated list of QR links",
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "qr_links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.QRLinkResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "entity.QRMerchantPaymentRequest": {
            "description": "QR Payment request details for processing a payment from checkout",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "currency": {
                    "description": "Optional: Three-letter currency code (defaults to ETB)\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Optional: Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "medium": {
                    "description": "Payment medium/provider to use\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "merchant_id": {
                    "description": "Merchant ID\n@Example 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "phone_number": {
                    "description": "Optional: Phone number to be paid\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "reference": {
                    "description": "Optional: Client-provided reference\n@Example ORDER123456",
                    "type": "string",
                    "example": "ORDER123456"
                }
            }
        },
        "entity.QRPaymentRequest": {
            "description": "Request to make a payment using a QR link",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount for DYNAMIC QR links (ignored for STATIC)",
                    "type": "number",
                    "example": 50
                },
                "medium": {
                    "description": "Payment method/provider",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "phone_number": {
                    "description": "Payer's phone number",
                    "type": "string",
                    "example": "251911234567"
                },
                "tip_amount": {
                    "description": "Optional tip amount",
                    "type": "number",
                    "example": 5
                },
                "tip_medium": {
                    "description": "Tip payment method (required if tip amount \u003e 0)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "TELEBIRR"
                },
                "tipee_phone": {
                    "description": "Tipee phone number (required if tip amount \u003e 0)",
                    "type": "string",
                    "example": "251911234568"
                }
            }
        },
        "entity.TransactionAnalytics": {
            "description": "Aggregated transaction analytics data",
            "type": "object",
            "properties": {
                "period_comparison": {
                    "description": "Period comparison (percentage change from previous period)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PeriodComparison"
                        }
                    ]
                },
                "total_amount": {
                    "type": "number"
                },
                "total_deposits": {
                    "description": "Transaction type breakdown",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                        }
                    ]
                },
                "total_merchant_net": {
                    "description": "Financial breakdown",
                    "type": "number"
                },
                "total_tips": {
                    "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                },
                "total_transactions": {
                    "description": "Transaction counts and amounts",
                    "type": "integer"
                },
                "total_withdrawals": {
                    "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                }
            }
        },
        "entity.TransactionDetails": {
            "description": "Additional details specific to the transaction",
            "type": "object",
            "properties": {
                "item_description": {
                    "description": "Item description",
                    "type": "string",
                    "example": "Item description"
                },
                "item_id": {
                    "description": "Item price",
                    "type": "string",
                    "example": "1234567890"
                },
                "item_name": {
                    "description": "Item name",
                    "type": "string",
                    "example": "Item name"
                },
                "item_quantity": {
                    "description": "Item quantity",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "entity.TransactionRedirects": {
            "description": "URLs for redirecting users after payment",
            "type": "object",
            "properties": {
                "failed": {
                    "description": "URL to redirect on failed payment",
                    "type": "string",
                    "example": "https://example.com/failed"
                },
                "success": {
                    "description": "URL to redirect on successful payment",
                    "type": "string",
                    "example": "https://example.com/success"
                }
            }
        },
        "entity.TransactionResponseDTO": {
            "description": "API response containing transaction information",
            "type": "object",
            "properties": {
                "admin_net": {
                    "description": "Admin net amount",
                    "type": "number",
                    "example": 5
                },
                "amount": {
                    "description": "Transaction amount",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "Callback URL",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "comment": {
                    "description": "Additional comment",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "created_at": {
                    "description": "Creation timestamp",
                    "type": "string",
                    "example": "2024-05-03T10:00:00Z"
                },
                "currency": {
                    "description": "Currency code",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Transaction description",
                    "type": "string",
                    "example": "Payment for service"
                },
                "details": {
                    "description": "Additional transaction details"
                },
                "failed_url": {
                    "description": "Failed redirect URL",
                    "type": "string",
                    "example": "https://example.com/failed"
                },
                "fee_amount": {
                    "description": "Fee amount",
                    "type": "number",
                    "example": 10
                },
                "id": {
                    "description": "Unique identifier for the transaction",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "medium": {
                    "description": "Payment medium used",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "merchant": {
                    "description": "Merchant information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.Merchant"
                        }
                    ]
                },
                "merchant_id": {
                    "description": "Merchant ID",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "merchant_net": {
                    "description": "Merchant net amount",
                    "type": "number",
                    "example": 970.5
                },
                "phone_number": {
                    "description": "Phone number of the payer",
                    "type": "string",
                    "example": "+251911234567"
                },
                "reference": {
                    "description": "Reference code",
                    "type": "string",
                    "example": "REF123456"
                },
                "reference_number": {
                    "description": "Reference number",
                    "type": "string",
                    "example": "TXN123456"
                },
                "status": {
                    "description": "Current status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                        }
                    ],
                    "example": "SUCCESS"
                },
                "success_url": {
                    "description": "Success redirect URL",
                    "type": "string",
                    "example": "https://example.com/success"
                },
                "test": {
                    "description": "Whether this is a test transaction",
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "description": "Security token",
                    "type": "string",
                    "example": "tok_123456"
                },
                "total_amount": {
                    "description": "Total amount",
                    "type": "number",
                    "example": 1000.5
                },
                "type": {
                    "description": "Type of transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                        }
                    ],
                    "example": "SALE"
                },
                "updated_at": {
                    "description": "Last update timestamp",
                    "type": "string",
                    "example": "2024-05-03T10:01:00Z"
                },
                "user_id": {
                    "description": "User ID associated with the transaction",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "vat_amount": {
                    "description": "VAT amount",
                    "type": "number",
                    "example": 15
                },
                "verified": {
                    "description": "Whether the transaction is verified",
                    "type": "boolean",
                    "example": true
                },
                "webhook_received": {
                    "description": "webhook_received",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "entity.TransactionSource": {
            "description": "Source of the transaction (e.g., DIRECT, QR_PAYMENT)",
            "type": "string",
            "enum": [
                "DIRECT",
                "HOSTED_CHECKOUT",
                "QR_PAYMENT",
                "WITHDRAWAL"
            ],
            "x-enum-comments": {
                "DIRECT": "Direct API calls",
                "HOSTED_CHECKOUT": "Hosted checkout page",
                "QR_PAYMENT": "QR payment link",
                "WITHDRAWAL_TIP": "Withdrawal/tip transactions"
            },
            "x-enum-descriptions": [
                "Direct API calls",
                "Hosted checkout page",
                "QR payment link",
                "Withdrawal/tip transactions"
            ],
            "x-enum-varnames": [
                "DIRECT",
                "HOSTED_CHECKOUT",
                "QR_PAYMENT",
                "WITHDRAWAL_TIP"
            ]
        },
        "entity.TransactionTypeAnalytics": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "entity.UpdateAPIKeyRequest": {
            "type": "object",
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "$ref": "#/definitions/entity.CustomTime"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateHostedCheckoutRequest": {
            "description": "Request for updating hosted checkout details (only allowed when status is PENDING)",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "expires_at": {
                    "description": "Optional expiry date time in UTC (ISO 8601 format)\n@Example 2024-12-31T23:59:59Z",
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "phone_number": {
                    "description": "Optional phone number (can be pre-filled)\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "redirects": {
                    "description": "URLs for payment redirects",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionRedirects"
                        }
                    ]
                },
                "supported_mediums": {
                    "description": "Supported payment mediums\n@Example [\"MPESA\", \"TELEBIRR\", \"CBE\"]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        " \"TELEBIRR\"",
                        " \"CBE\"]"
                    ]
                }
            }
        },
        "entity.UpdateQRLinkRequest": {
            "description": "Request to update an existing QR payment link",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount for STATIC type QR links",
                    "type": "number",
                    "example": 150.75
                },
                "description": {
                    "description": "Description",
                    "type": "string",
                    "example": "Updated payment description"
                },
                "image_url": {
                    "description": "Image URL",
                    "type": "string",
                    "example": "https://example.com/new-image.jpg"
                },
                "is_active": {
                    "description": "Whether QR link is active",
                    "type": "boolean",
                    "example": true
                },
                "is_tip_enabled": {
                    "description": "Whether tipping is enabled",
                    "type": "boolean",
                    "example": false
                },
                "supported_methods": {
                    "description": "Supported payment methods",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "tag": {
                    "description": "QR link category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.QRLinkTag"
                        }
                    ],
                    "example": "RESTAURANT"
                },
                "title": {
                    "description": "Title",
                    "type": "string",
                    "example": "Updated Shop Payment"
                }
            }
        },
        "entity.WithdrawalRequest": {
            "description": "Withdrawal request details",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to withdraw",
                    "type": "number",
                    "example": 500
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code",
                    "type": "string",
                    "example": "ETB"
                },
                "medium": {
                    "description": "Payment medium/provider to use\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "phone_number": {
                    "description": "Bank account number",
                    "type": "string",
                    "example": "1234567890"
                },
                "reference": {
                    "description": "Client-provided reference",
                    "type": "string",
                    "example": "WD123456789"
                }
            }
        },
        "gin.AwashCallback": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "dateApproved": {
                    "type": "string"
                },
                "dateRequested": {
                    "type": "string"
                },
                "externalReference": {
                    "type": "string"
                },
                "payerPhone": {
                    "type": "string"
                },
                "returnCode": {
                    "type": "integer"
                },
                "returnMessage": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                }
            }
        },
        "gin.EthSwitchCallback": {
            "type": "object",
            "properties": {
                "mdOrder": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "orderNumber": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "gin.MPESACallback": {
            "type": "object",
            "required": [
                "status",
                "transaction_id"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Payment successful"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1"
                    ],
                    "example": "0"
                },
                "transaction_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "gin.SettlementResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Settlement processed successfully"
                }
            }
        },
        "gin.TelebirrCallback": {
            "type": "object",
            "required": [
                "status",
                "transaction_id"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Payment successful"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1"
                    ],
                    "example": "0"
                },
                "transaction_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_core_entity.APIKey": {
            "type": "object",
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_used_at": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid transaction ID format"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse": {
            "description": "Error response with a message",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_socialpayapi_core_entity.QRPaymentResponse": {
            "description": "Response containing QR payment processing results",
            "type": "object",
            "properties": {
                "Socialpay_transaction_id": {
                    "description": "Socialpay transaction ID",
                    "type": "string",
                    "example": "1234567890"
                },
                "message": {
                    "description": "Human-readable message about the operation",
                    "type": "string",
                    "example": "Payment initiated successfully"
                },
                "payment_url": {
                    "description": "URL to redirect the user for payment (if applicable)",
                    "type": "string",
                    "example": "https://pay.example.com/checkout"
                },
                "reference_id": {
                    "description": "Unique payment reference",
                    "type": "string",
                    "example": "PAY123456789"
                },
                "status": {
                    "description": "Status of the payment",
                    "type": "string",
                    "example": "PENDING"
                },
                "success": {
                    "description": "Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium": {
            "description": "Payment medium or provider (e.g., MPESA, TELEBIRR)",
            "type": "string",
            "enum": [
                "SOCIALPAY",
                "CYBERSOURCE",
                "ETHSWITCH",
                "MPESA",
                "TELEBIRR",
                "CBE",
                "AWASH"
            ],
            "x-enum-varnames": [
                "SOCIALPAY",
                "CYBERSOURCE",
                "ETHSWITCH",
                "MPESA",
                "TELEBIRR",
                "CBE",
                "AWASH"
            ]
        },
        "github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus": {
            "description": "Current status of the transaction",
            "type": "string",
            "enum": [
                "INITIATED",
                "PENDING",
                "SUCCESS",
                "FAILED",
                "REFUNDED",
                "EXPIRED",
                "CANCELED"
            ],
            "x-enum-varnames": [
                "INITIATED",
                "PENDING",
                "SUCCESS",
                "FAILED",
                "REFUNDED",
                "EXPIRED",
                "CANCELED"
            ]
        },
        "github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType": {
            "description": "Type of transaction (e.g., SALE, WITHDRAWAL)",
            "type": "string",
            "enum": [
                "REPLENISHMENT",
                "P2P",
                "SALE",
                "BILL_PAYMENT",
                "SETTLEMENT",
                "BILL_AIRTIME",
                "DEPOSIT",
                "WITHDRAWAL",
                "REFUND"
            ],
            "x-enum-varnames": [
                "REPLENISHMENT",
                "P2P",
                "SALE",
                "BILL_PAYMENT",
                "SETTLEMENT",
                "BILL",
                "DEPOSIT",
                "WITHDRAWAL",
                "REFUND"
            ]
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.Merchant": {
            "type": "object",
            "properties": {
                "business_registration_number": {
                    "type": "string"
                },
                "business_type": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "established_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "industry_category": {
                    "type": "string"
                },
                "is_betting_company": {
                    "type": "boolean"
                },
                "legal_name": {
                    "type": "string"
                },
                "lottery_certificate_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.MerchantStatus"
                },
                "tax_identification_number": {
                    "type": "string"
                },
                "trading_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "website_url": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.MerchantStatus": {
            "type": "string",
            "enum": [
                "pending_verification",
                "active",
                "suspended",
                "terminated"
            ],
            "x-enum-varnames": [
                "StatusPendingVerification",
                "StatusActive",
                "StatusSuspended",
                "StatusTerminated"
            ]
        },
        "pagination.PaginationInfo": {
            "type": "object",
            "required": [
                "page",
                "page_size"
            ],
            "properties": {
                "has_next_page": {
                    "type": "boolean"
                },
                "has_pervious": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer",
                    "minimum": 1
                },
                "page_size": {
                    "type": "integer",
                    "maximum": 20,
                    "minimum": 1
                },
                "total_items": {
                    "type": "integer"
                },
                "total_page": {
                    "type": "integer"
                }
            }
        },
        "payment.STDCallbackRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "providerData": {
                    "type": "string"
                },
                "providerTxId": {
                    "type": "string"
                },
                "referenceId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/response.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.PaginationInfo"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key authentication for API key management endpoints",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "BearerAuth": {
            "description": "Bearer token authentication for protected endpoints. Use format: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "MerchantID": {
            "description": "Merchant ID authentication for merchant endpoints",
            "type": "apiKey",
            "name": "X-MERCHANT-ID",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}
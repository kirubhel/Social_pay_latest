{
    "swagger": "2.0",
    "info": {
        "description": "SocialPay API V2 documentation",
        "title": "SocialPay API V2",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@socialpay.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "host": "196.190.251.194:8082",
    "basePath": "/api/v2/",
    "paths": {
        "/admin/all": {
            "get": {
                "description": "Get list of admin team members",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Get admin team members",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/analytics/chart": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get chart data for admin dashboard with comprehensive financial information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Analytics"
                ],
                "summary": "Get admin chart data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by merchant ID",
                        "name": "merchant_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Chart type (daily, weekly, monthly)",
                        "name": "chart_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Date unit (day, week, month)",
                        "name": "date_unit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.ChartData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/analytics/merchant-growth": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get merchant growth statistics and trends",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Analytics"
                ],
                "summary": "Get merchant growth analytics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "month",
                        "description": "Date unit (day, week, month)",
                        "name": "date_unit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantGrowthAnalytics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/analytics/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive transaction analytics for admin with VAT, fees, and admin net information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Analytics"
                ],
                "summary": "Get admin transaction analytics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by merchant ID",
                        "name": "merchant_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction type",
                        "name": "transaction_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.AdminTransactionAnalytics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/auth/login": {
            "post": {
                "description": "Authenticate admin credentials and send OTP (super_admin and admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin-auth"
                ],
                "summary": "Admin Login",
                "parameters": [
                    {
                        "description": "Admin login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.AdminLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or insufficient privileges",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/commissions/default": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the default commission settings for all merchants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get default commission settings",
                "responses": {
                    "200": {
                        "description": "settings: entity.CommissionSettings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the default commission settings for all merchants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update default commission settings",
                "parameters": [
                    {
                        "description": "Commission Settings",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CommissionSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "settings: entity.CommissionSettings",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/commissions/merchant/{merchantID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the commission settings for a specific merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get merchant commission settings",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "commission: entity.MerchantCommission",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: invalid merchant ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the commission settings for a specific merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update merchant commission settings",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Merchant Commission Settings",
                        "name": "commission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.MerchantCommission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "commission: entity.MerchantCommission",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "error: forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/create": {
            "post": {
                "description": "Create admin team member",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Create Admin team member",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/group/:groupId": {
            "get": {
                "description": "Get admin group by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Get admin group",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update admin group by id with optional title, description, and permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Update admin group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update group details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete admin group by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Delete admin group",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/group/create": {
            "post": {
                "description": "Create new admin group with title, description, and set of permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Create new admin group",
                "parameters": [
                    {
                        "description": "CreateGroup details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.CreateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Group creation successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Group already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/admin/groups": {
            "get": {
                "description": "Get list of admin groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Get admin groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/health/wallet-balance": {
            "get": {
                "description": "Verifies if wallet balances match transaction history (deposits - withdrawals)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Check wallet balance health",
                "responses": {
                    "200": {
                        "description": "health_check: WalletHealthCheck",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/remove/:userGroupId": {
            "delete": {
                "description": "Remove admin team member by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Remove admin team member",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/update/:userGroupId": {
            "put": {
                "description": "Update admin team member user data and group assignment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Update admin team member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Group ID",
                        "name": "userGroupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateTeamMember details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateTeamMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/wallet": {
            "get": {
                "description": "Retrieves the admin wallet information including total amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get admin wallet",
                "responses": {
                    "200": {
                        "description": "wallet: entity.MerchantWallet, total_amount: float64",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/all": {
            "get": {
                "description": "Get list of team members",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Get team members",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/activities": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get authenticated user's authentication activities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user activities",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit number of activities",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User activities",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user credentials and send OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout user and invalidate session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/password/verify-otp": {
            "post": {
                "description": "Verify OTP code and complete reset password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "OTP verification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid or expired OTP",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get authenticated user's profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update authenticated user's profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account with phone verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Phone already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/request-otp": {
            "post": {
                "description": "Users can request otp code for password management",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request OTP",
                "parameters": [
                    {
                        "description": "Request OTP request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.RequestOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or insufficient privileges",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Users can reset their password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Reset password details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password resetted successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid or expired OTP",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/verify-otp": {
            "post": {
                "description": "Verify OTP code and complete login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "OTP verification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid or expired OTP",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/checkout/makepayment": {
            "post": {
                "description": "Process payment from hosted checkout page with selected medium and phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Process payment from hosted checkout",
                "parameters": [
                    {
                        "description": "Checkout payment request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CheckoutPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/checkout/{id}": {
            "get": {
                "description": "Retrieve hosted checkout details by ID for the checkout page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Get hosted checkout details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hosted Checkout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.HostedCheckoutWithMerchantResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/create": {
            "post": {
                "description": "Create team member",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Create team member",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/catalogs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of catalogs from the ERP system with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Get a list of catalogs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of items to skip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to take",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.CatalogsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new catalog in the ERP system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Create a new catalog",
                "parameters": [
                    {
                        "description": "Catalog creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateCatalogRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Catalog"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/catalogs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a catalog from the ERP system by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Get a catalog by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Catalog"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing catalog in the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Update an existing catalog",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Catalog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Catalog update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateCatalogRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a catalog from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalogs"
                ],
                "summary": "Delete a catalog by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Catalog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/customers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of customers from the ERP system with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get a list of customers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to take",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.CustomersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new customer in the ERP system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Create a new customer",
                "parameters": [
                    {
                        "description": "Customer creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/customers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a customer from the ERP system by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Get a customer by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Customer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing customer in the ERP system by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Update an existing customer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a customer from the ERP system by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customers"
                ],
                "summary": "Delete a customer by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of orders from the ERP system with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get a list of orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to take",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.OrdersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new order in the ERP system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an order from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing order in the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update an existing order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an order from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Delete an order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/payment-methods": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of payment methods from the ERP system with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Methods"
                ],
                "summary": "Get a list of payment methods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to take",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentMethodsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new payment method in the ERP system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Methods"
                ],
                "summary": "Create a new payment method",
                "parameters": [
                    {
                        "description": "Payment method creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreatePaymentMethodRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.PaymentMethod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/payment-methods/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a payment method from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Methods"
                ],
                "summary": "Get a payment method by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.PaymentMethod"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing payment method in the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Methods"
                ],
                "summary": "Update an existing payment method",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment method update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdatePaymentMethodRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a payment method from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment Methods"
                ],
                "summary": "Delete a payment method by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Method ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of products from the ERP system with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a list of products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to take",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.ProductsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new product in the ERP system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Product creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/products/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a product from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing product in the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update an existing product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a product from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/warehouses": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of warehouses from the ERP system with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Get a list of warehouses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "merchantID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to take",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.WarehousesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new warehouse in the ERP system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Create a new warehouse",
                "parameters": [
                    {
                        "description": "Warehouse creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateWarehouseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Warehouse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/erp/warehouses/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a warehouse from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Get a warehouse by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Warehouse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing warehouse in the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Update an existing warehouse",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Warehouse update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateWarehouseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a warehouse from the ERP system by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Warehouses"
                ],
                "summary": "Delete a warehouse by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Warehouse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file/upload": {
            "post": {
                "description": "Uploads single file to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Upload single file",
                "responses": {
                    "201": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/group/:groupId": {
            "get": {
                "description": "Get group by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Get group",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update group by id with optional title, description, and permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Update group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update group details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete group by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Get group",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/group/create": {
            "post": {
                "description": "Create new group with title, description, and set of permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Create new group",
                "parameters": [
                    {
                        "description": "CreateGroup details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.CreateGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Group creation successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Group already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "description": "Get list of groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Get groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all API keys for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "List API keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.APIKeyResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new API key for a merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Create API key",
                "parameters": [
                    {
                        "description": "API key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keys/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an API key by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Get API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing API key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Delete API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing API key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Update API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "API key update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/keys/{id}/rotate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a new secret for an API key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Rotate API key secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyRotateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchant/ip-whitelist": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the IP whitelist for the authenticated merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Get merchant IP whitelist",
                "responses": {
                    "200": {
                        "description": "whitelist: entity.IPWhitelist",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create the IP whitelist for the authenticated merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Create merchant IP whitelist",
                "parameters": [
                    {
                        "description": "IP Whitelist Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CreateIPWhitelistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: IP whitelist created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/merchant/ip-whitelist/:id": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the IP whitelist for the authenticated merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Update merchant IP whitelist",
                "parameters": [
                    {
                        "description": "IP Whitelist Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateIPWhitelistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "whitelist: entity.IPWhitelist",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the IP whitelist for the authenticated merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "merchant"
                ],
                "summary": "Delete merchant IP whitelist",
                "responses": {
                    "200": {
                        "description": "message: IP whitelist deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/merchants/:id": {
            "get": {
                "description": "Get a merchant by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Get merchant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/:id/details": {
            "get": {
                "description": "Get complete merchant information with related data by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Get merchant details by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/admin/add": {
            "post": {
                "description": "Adds new with phone verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Adds new merchant",
                "parameters": [
                    {
                        "description": "AddMerchant details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.AddMerchantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Phone already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/contact/update/:id": {
            "put": {
                "description": "Update merchant contact informations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Update merchant contact",
                "parameters": [
                    {
                        "description": "UpdateMerchantContact details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateMerchantContactRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Merchant contact updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/delete/:id": {
            "delete": {
                "description": "Admin deletes merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Delete merchant by admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Merchant deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Merchant not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/delete/all": {
            "delete": {
                "description": "Admin deletes list of merchants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Delete merchants by admin",
                "parameters": [
                    {
                        "description": "DeleteMerchants details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.DeleteMerchantsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Merchantd deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Merchant not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/document/update/:id": {
            "put": {
                "description": "Update merchant document informations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Update merchant document",
                "parameters": [
                    {
                        "description": "UpdateMerchantContact details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateMerchantDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Merchant document updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/export": {
            "post": {
                "description": "Export list of merchants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Export merchants",
                "parameters": [
                    {
                        "description": "ExportMerchants details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.ExportMerchantsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Merchants exported successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Phone already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/impersonate": {
            "post": {
                "description": "Admins can impersonate specific merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Admins impersonates specific merchant",
                "parameters": [
                    {
                        "description": "ImpersonateMerchantRequest details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.ImpersonateMerchantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Merchant impersonated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/stats": {
            "get": {
                "description": "Get merchant statistics for admin dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Get merchant statistics",
                "responses": {
                    "200": {
                        "description": "Merchant statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/status/update/:id": {
            "put": {
                "description": "Update merchant status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Update merchant status",
                "parameters": [
                    {
                        "description": "UpdateMerchantStatus details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateMerchantStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Merchant status updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/admin/update/:id": {
            "put": {
                "description": "Update merchant information, contact information and documents by admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Update merchant by admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateAdminMerchant details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateAdminMerchantRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Merchant updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Merchant not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/merchants/all": {
            "get": {
                "description": "Get a list of merchants",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Get merchants",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Merchant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/merchants/update": {
            "put": {
                "description": "Update merchant informations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-merchants"
                ],
                "summary": "Update merchant",
                "parameters": [
                    {
                        "description": "UpdateMerchant details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateMerchantRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Merchants updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/payment/checkout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a hosted checkout session for payment processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Create hosted checkout",
                "parameters": [
                    {
                        "description": "Hosted checkout request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.HostedCheckoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/checkout/{id}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update hosted checkout details (only allowed when status is PENDING and not expired)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Update hosted checkout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hosted Checkout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateHostedCheckoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/direct": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process a direct payment transaction with the specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Process a direct payment",
                "parameters": [
                    {
                        "description": "Payment request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.DirectPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/receipt/{id}": {
            "get": {
                "description": "Retrieve details of a specific transaction by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transaction details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.TransactionResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/transaction/{id}": {
            "get": {
                "description": "Retrieve details of a specific transaction by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transaction details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.TransactionResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/withdrawal": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process a withdrawal request for the specified amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Request a withdrawal",
                "parameters": [
                    {
                        "description": "Withdrawal request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.WithdrawalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/public/keys/validate": {
            "post": {
                "description": "Validate an API key with public and secret keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "apikeys"
                ],
                "summary": "Validate API key",
                "parameters": [
                    {
                        "description": "API key validate request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.APIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr/callback": {
            "post": {
                "description": "Handle callback from payment processors for QR payments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Handle QR payment callback",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/qr/payment/link/{id}": {
            "get": {
                "description": "Get QR link details for payment processing (public endpoint)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Get QR link for payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Process a payment using QR link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Process QR payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "QR payment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.QRPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_core_entity.QRPaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr/payment/merchant": {
            "post": {
                "description": "Process a QR payment transaction from checkout page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Payments"
                ],
                "summary": "Process a QR payment for merchant",
                "parameters": [
                    {
                        "description": "QR Payment request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.QRMerchantPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_core_entity.QRPaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr_mgmt/links": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of QR payment links for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Get QR payment links",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 10)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinksListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new QR payment link for merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Create QR payment link",
                "parameters": [
                    {
                        "description": "QR link creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.CreateQRLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/qr_mgmt/links/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get QR payment link details by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Get QR payment link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing QR payment link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Update QR payment link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "QR link update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.UpdateQRLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.QRLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete (deactivate) a QR payment link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QR-Management"
                ],
                "summary": "Delete QR payment link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QR Link ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rbac/resources": {
            "get": {
                "description": "Get list of resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "v2-rbac"
                ],
                "summary": "Get resources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/remove/:userGroupId": {
            "delete": {
                "description": "Remove team member by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Remove team member",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/awash": {
            "post": {
                "description": "Process Awash settlement callback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle Awash settlement",
                "parameters": [
                    {
                        "description": "Awash settlement callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.AwashCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/cbe": {
            "post": {
                "description": "Process CBE payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle CBE payment settlement",
                "parameters": [
                    {
                        "description": "CBE callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.STDCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/cybersource": {
            "post": {
                "description": "Process Cybersource payment callback and update transaction status",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle Cybersource payment settlement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction UUID",
                        "name": "req_transaction_uuid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reason code from Cybersource",
                        "name": "reason_code",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Decision from Cybersource (ACCEPT/DECLINE/CANCEL)",
                        "name": "decision",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "List of signed fields",
                        "name": "signed_field_names",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request signature",
                        "name": "signature",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/epg/payment": {
            "post": {
                "description": "process the ethswtich callback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle the ethswitch settlemnet",
                "parameters": [
                    {
                        "description": "ethswitch callback body",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.EthSwitchCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/mpesa": {
            "post": {
                "description": "Process M-PESA payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle M-PESA payment settlement",
                "parameters": [
                    {
                        "description": "M-PESA callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.MPESACallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/std": {
            "post": {
                "description": "Process payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle payment settlement",
                "parameters": [
                    {
                        "description": "Settlement callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.STDCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/settle/telebirr": {
            "post": {
                "description": "Process Telebirr payment callback and update transaction status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settlement"
                ],
                "summary": "Handle Telebirr payment settlement",
                "parameters": [
                    {
                        "description": "Telebirr callback data",
                        "name": "callback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.TelebirrCallback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.SettlementResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/analytics": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get aggregated transaction analytics with filters and period comparison",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction analytics",
                "parameters": [
                    {
                        "description": "Analytics filter parameters",
                        "name": "analyticsFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.AnalyticsFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.TransactionAnalytics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/chart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get chart data for transaction analytics with date aggregation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transaction chart data",
                "parameters": [
                    {
                        "description": "Chart filter parameters",
                        "name": "chartFilter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.ChartFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.ChartData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/data/export": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "export the transaction data with pdf format. Use date format YYYY-MM-DD (e.g. 2023-01-01)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "exporting transaction data",
                "parameters": [
                    {
                        "description": "request body with date format YYYY-MM-DD",
                        "name": "filterParameter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.FilterParameters"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transactions/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get transacton history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "get transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get transacton history with given specific parameter. Use date format YYYY-MM-DD (e.g. 2023-01-01)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "get transaction by specific filter parameter",
                "parameters": [
                    {
                        "description": "request body with date format YYYY-MM-DD",
                        "name": "filterParameter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.FilterParameters"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transactions/override/{transactionID}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Override the status of a transaction with admin approval",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Override transaction status",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Transaction ID",
                        "name": "transactionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New status (INITIATED, PENDING, SUCCESS, FAILED, REFUNDED, EXPIRED, CANCELED)",
                        "name": "status",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reason for override (minimum 10 characters)",
                        "name": "reason",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Admin ID",
                        "name": "adminID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/update/:userGroupId": {
            "put": {
                "description": "Update team member user data and group assignment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team-member-management"
                ],
                "summary": "Update team member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Group ID",
                        "name": "userGroupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateTeamMember details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gin.UpdateTeamMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/wallet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "MerchantID": []
                    }
                ],
                "description": "Get the wallet information for the authenticated merchant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get merchant wallet",
                "responses": {
                    "200": {
                        "description": "Wallet information",
                        "schema": {
                            "$ref": "#/definitions/controller.WalletResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Wallet Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/webhooks/callback": {
            "get": {
                "description": "Retrieves all callback logs ordered by creation date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get all callback logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (min: 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (min: 1, max: 100)",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Receives a webhook callback and produces an event to Kafka",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Receive webhook callback",
                "parameters": [
                    {
                        "description": "Webhook callback payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.WebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status: success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/callback/merchant": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all callback logs for the merchant associated with the API key. The merchant ID is automatically determined from the API key context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get callback logs for authenticated merchant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (min: 1)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (min: 1, max: 100)",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "error: invalid merchant ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "error: unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/webhooks/callback/{id}": {
            "get": {
                "description": "Retrieves a specific callback log by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Get callback log by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Callback Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.CallbackLog"
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.CreateIPWhitelistRequest": {
            "type": "object",
            "properties": {
                "ip_address": {
                    "type": "string"
                }
            }
        },
        "controller.ErrorResponse": {
            "description": "Error response",
            "type": "object",
            "properties": {
                "error": {
                    "description": "@Description Error message",
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "controller.UpdateIPWhitelistRequest": {
            "type": "object",
            "properties": {
                "ip_address": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                }
            }
        },
        "controller.WalletResponse": {
            "description": "Wallet information response",
            "type": "object",
            "properties": {
                "balance": {
                    "description": "@Description Current balance in the wallet",
                    "type": "number",
                    "example": 1000.5
                },
                "created_at": {
                    "description": "@Description When the wallet was created",
                    "type": "string",
                    "example": "2024-05-22T09:00:00Z"
                },
                "currency": {
                    "description": "@Description Currency code",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "@Description Optional description of the wallet",
                    "type": "string",
                    "example": "Main merchant wallet"
                },
                "id": {
                    "description": "@Description Unique identifier for the wallet",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_active": {
                    "description": "@Description Whether the wallet is active",
                    "type": "boolean",
                    "example": true
                },
                "last_sync_at": {
                    "description": "@Description When the wallet was last synchronized",
                    "type": "string",
                    "example": "2024-05-22T09:00:00Z"
                },
                "merchant_id": {
                    "description": "@Description ID of the merchant who owns this wallet",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "updated_at": {
                    "description": "@Description When the wallet was last updated",
                    "type": "string",
                    "example": "2024-05-22T09:00:00Z"
                }
            }
        },
        "dto.WebhookRequest": {
            "type": "object",
            "required": [
                "callbackUrl",
                "merchantId",
                "message",
                "status",
                "timestamp",
                "transactionId",
                "userId"
            ],
            "properties": {
                "callbackUrl": {
                    "type": "string"
                },
                "isHostedCheckout": {
                    "type": "boolean"
                },
                "merchantId": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "providerData": {
                    "type": "string"
                },
                "providerTxId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "entity.APIKeyResponse": {
            "type": "object",
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_used_at": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.APIKeyRotateResponse": {
            "type": "object",
            "properties": {
                "api_key": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_core_entity.APIKey"
                },
                "secret_key": {
                    "type": "string"
                }
            }
        },
        "entity.APIKeyValidateRequest": {
            "type": "object",
            "required": [
                "public_key",
                "secret_key"
            ],
            "properties": {
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                }
            }
        },
        "entity.AdminTransactionAnalytics": {
            "description": "Admin transaction analytics with VAT, fees, and admin net information",
            "type": "object",
            "properties": {
                "period_comparison": {
                    "description": "Period comparison (percentage change from previous period)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PeriodComparison"
                        }
                    ]
                },
                "total_admin_net": {
                    "type": "number"
                },
                "total_amount": {
                    "type": "number"
                },
                "total_customer_net": {
                    "type": "number"
                },
                "total_deposits": {
                    "description": "Transaction type breakdown",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                        }
                    ]
                },
                "total_fee_amount": {
                    "type": "number"
                },
                "total_merchant_net": {
                    "description": "Financial breakdown - Admin specific",
                    "type": "number"
                },
                "total_tips": {
                    "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                },
                "total_transactions": {
                    "description": "Transaction counts and amounts",
                    "type": "integer"
                },
                "total_vat_amount": {
                    "type": "number"
                },
                "total_withdrawals": {
                    "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                }
            }
        },
        "entity.AnalyticsFilter": {
            "description": "Parameters for filtering transaction analytics data",
            "type": "object",
            "required": [
                "end_date",
                "start_date"
            ],
            "properties": {
                "amount_max": {
                    "type": "number"
                },
                "amount_min": {
                    "description": "@Description Amount range filter",
                    "type": "number"
                },
                "end_date": {
                    "description": "@Description End date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-12-31",
                    "type": "string"
                },
                "medium": {
                    "description": "@Description Payment medium filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "merchant_id": {
                    "description": "@Description Merchant ID filter (for admin analytics)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "qr_tag": {
                    "description": "@Description QR tag filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "description": "@Description Transaction source filter (QR, DIRECT, HOSTED_CHECKOUT)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.TransactionSource"
                    }
                },
                "start_date": {
                    "description": "@Description Start date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-01-01",
                    "type": "string"
                },
                "status": {
                    "description": "@Description Transaction status filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                    }
                },
                "type": {
                    "description": "@Description Transaction type filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                    }
                }
            }
        },
        "entity.CallbackLog": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "request_body": {
                    "type": "string"
                },
                "response_body": {
                    "type": "string"
                },
                "retry_count": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "txn_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.CatalogResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "$ref": "#/definitions/types.NullString"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.CatalogStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "entity.CatalogStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "draft"
            ],
            "x-enum-varnames": [
                "CatalogStatusActive",
                "CatalogStatusInactive",
                "CatalogStatusDraft"
            ]
        },
        "entity.CatalogsResponse": {
            "type": "object",
            "properties": {
                "catalogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CatalogResponse"
                    }
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "entity.ChartData": {
            "description": "Chart data for transaction analytics",
            "type": "object",
            "properties": {
                "chart_type": {
                    "type": "string"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.ChartDataPoint"
                    }
                },
                "date_unit": {
                    "$ref": "#/definitions/entity.DateUnit"
                },
                "summary": {
                    "$ref": "#/definitions/entity.ChartSummary"
                }
            }
        },
        "entity.ChartDataPoint": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "entity.ChartFilter": {
            "description": "Parameters for generating chart data",
            "type": "object",
            "required": [
                "chart_type",
                "date_unit",
                "end_date",
                "start_date"
            ],
            "properties": {
                "amount_max": {
                    "type": "number"
                },
                "amount_min": {
                    "description": "@Description Amount range filter",
                    "type": "number"
                },
                "chart_type": {
                    "description": "@Description Chart type: \"amount\" for transaction amounts, \"count\" for transaction counts",
                    "type": "string"
                },
                "date_unit": {
                    "description": "@Description Date unit for chart aggregation (day, week, month, year)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.DateUnit"
                        }
                    ]
                },
                "end_date": {
                    "description": "@Description End date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-12-31",
                    "type": "string"
                },
                "medium": {
                    "description": "@Description Payment medium filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "merchant_id": {
                    "description": "@Description Merchant ID filter (for admin analytics)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "qr_tag": {
                    "description": "@Description QR tag filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "description": "@Description Transaction source filter (QR, DIRECT, HOSTED_CHECKOUT)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.TransactionSource"
                    }
                },
                "start_date": {
                    "description": "@Description Start date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-01-01",
                    "type": "string"
                },
                "status": {
                    "description": "@Description Transaction status filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                    }
                },
                "type": {
                    "description": "@Description Transaction type filter",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                    }
                }
            }
        },
        "entity.ChartSummary": {
            "type": "object",
            "properties": {
                "average_value": {
                    "type": "number"
                },
                "data_points": {
                    "type": "integer"
                },
                "max_value": {
                    "type": "number"
                },
                "min_value": {
                    "type": "number"
                },
                "total_value": {
                    "type": "number"
                }
            }
        },
        "entity.CheckoutPaymentRequest": {
            "description": "Payment request from hosted checkout page",
            "type": "object",
            "properties": {
                "hosted_checkout_id": {
                    "description": "Hosted checkout ID\n@Example 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "medium": {
                    "description": "Selected payment medium\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA,ETHSWITCH"
                },
                "phone_number": {
                    "description": "Phone number for payment\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "tip_amount": {
                    "description": "Optional tip amount",
                    "type": "number",
                    "example": 5
                },
                "tip_medium": {
                    "description": "Tip payment method (required if tip amount \u003e 0)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "TELEBIRR"
                },
                "tipee_phone": {
                    "description": "Tipee phone number (required if tip amount \u003e 0)",
                    "type": "string",
                    "example": "251911234568"
                }
            }
        },
        "entity.CommissionSettings": {
            "type": "object",
            "properties": {
                "cent": {
                    "type": "number"
                },
                "percent": {
                    "type": "number"
                }
            }
        },
        "entity.CreateAPIKeyRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "$ref": "#/definitions/entity.CustomTime"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.CreateCatalogRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "$ref": "#/definitions/types.NullString"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.CreateCustomerRequest": {
            "type": "object",
            "required": [
                "email",
                "merchant_id",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "loyalty_points": {
                    "type": "integer"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.CreateMerchantDocumnetRequest": {
            "type": "object",
            "properties": {
                "document_type": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.CreateMerchantPersonalInformationRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "entity.CreateOrderRequest": {
            "type": "object",
            "required": [
                "customer_details",
                "merchant_id",
                "order_details",
                "order_items"
            ],
            "properties": {
                "customer_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.CustomerDetails"
                },
                "merchant_id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Metadata"
                },
                "order_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderDetails"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderItem"
                    }
                },
                "tracking": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Tracking"
                }
            }
        },
        "entity.CreatePaymentMethodRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "commission": {
                    "type": "number"
                },
                "details": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entity.CreatePermissionRequest": {
            "type": "object",
            "required": [
                "effect",
                "operations",
                "resource_id"
            ],
            "properties": {
                "effect": {
                    "type": "string"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resource_id": {
                    "type": "string"
                }
            }
        },
        "entity.CreateProductRequest": {
            "type": "object",
            "required": [
                "currency",
                "name",
                "price",
                "sku"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dimensions": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "entity.CreateQRLinkRequest": {
            "description": "Request to create a new QR payment link",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount for STATIC type QR links",
                    "type": "number",
                    "example": 100.5
                },
                "description": {
                    "description": "Optional description",
                    "type": "string",
                    "example": "Payment for shop items"
                },
                "image_url": {
                    "description": "Optional image URL",
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "is_tip_enabled": {
                    "description": "Whether tipping is enabled",
                    "type": "boolean",
                    "example": true
                },
                "supported_methods": {
                    "description": "Supported payment methods",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        "\"TELEBIRR\"]"
                    ]
                },
                "tag": {
                    "description": "QR link category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.QRLinkTag"
                        }
                    ],
                    "example": "SHOP"
                },
                "title": {
                    "description": "Optional title",
                    "type": "string",
                    "example": "My Shop Payment"
                },
                "type": {
                    "description": "Type of QR link (DYNAMIC or STATIC)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.QRLinkType"
                        }
                    ],
                    "example": "DYNAMIC"
                }
            }
        },
        "entity.CreateWarehouseRequest": {
            "type": "object",
            "required": [
                "location",
                "name"
            ],
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.CustomTime": {
            "type": "object",
            "properties": {
                "time.Time": {
                    "type": "string"
                }
            }
        },
        "entity.CustomerResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "loyalty_points": {
                    "type": "integer"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.CustomerStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "entity.CustomerStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "blocked"
            ],
            "x-enum-varnames": [
                "CustomerStatusActive",
                "CustomerStatusInactive",
                "CustomerStatusBlocked"
            ]
        },
        "entity.CustomersResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CustomerResponse"
                    }
                }
            }
        },
        "entity.DataFormat": {
            "type": "string",
            "enum": [
                "pdf"
            ],
            "x-enum-varnames": [
                "FORMATPDF"
            ]
        },
        "entity.DateUnit": {
            "type": "string",
            "enum": [
                "day",
                "week",
                "month",
                "year"
            ],
            "x-enum-varnames": [
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
            ]
        },
        "entity.DirectPaymentRequest": {
            "description": "Payment request details for processing a direct payment",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "details": {
                    "description": "Additional payment details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionDetails"
                        }
                    ]
                },
                "medium": {
                    "description": "Payment medium/provider to use\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "merchant_pays_fee": {
                    "description": "Indicates who should pay the fee (true for merchant, false for customer)\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "phone_number": {
                    "description": "Phone number to be paid\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "redirects": {
                    "description": "URLs for payment redirects",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionRedirects"
                        }
                    ]
                },
                "reference": {
                    "description": "Merchant ID\n@Example 1234567890",
                    "type": "string",
                    "example": "1234567890"
                }
            }
        },
        "entity.FilterParameters": {
            "description": "Parameters for filtering transaction data",
            "type": "object",
            "properties": {
                "end_date": {
                    "description": "@Description End date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-12-31",
                    "type": "string"
                },
                "format": {
                    "$ref": "#/definitions/entity.DataFormat"
                },
                "socialpay_tx_id": {
                    "description": "Searching",
                    "type": "string"
                },
                "medium": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                },
                "merchant_id": {
                    "description": "optional",
                    "type": "string"
                },
                "provider_tx_id": {
                    "description": "optional",
                    "type": "string"
                },
                "reference_id": {
                    "description": "optional",
                    "type": "string"
                },
                "sort": {
                    "description": "Sort\n@Description ASC or DESC",
                    "type": "string"
                },
                "start_date": {
                    "description": "@Description Start date in ISO 8601 format (YYYY-MM-DD)\n@Example 2023-01-01",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                },
                "type": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                }
            }
        },
        "entity.HostedCheckoutRequest": {
            "description": "Hosted checkout request details for creating a payment link",
            "type": "object",
            "properties": {
                "accept_tip": {
                    "type": "boolean",
                    "example": false
                },
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "expires_at": {
                    "description": "Optional expiry date time in UTC (ISO 8601 format)\n@Example 2024-12-31T23:59:59Z",
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "merchant_pays_fee": {
                    "description": "Indicates who should pay the fee (true for merchant, false for customer)\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "phone_number": {
                    "description": "Optional phone number (can be pre-filled)\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "redirects": {
                    "description": "URLs for payment redirects",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionRedirects"
                        }
                    ]
                },
                "reference": {
                    "description": "Merchant reference\n@Example ORDER123456",
                    "type": "string",
                    "example": "ORDER123456"
                },
                "supported_mediums": {
                    "description": "Supported payment mediums\n@Example [\"MPESA\", \"TELEBIRR\", \"CBE\"]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        " \"TELEBIRR\"",
                        " \"CBE\"",
                        "\"ETHSWITCH\"]"
                    ]
                }
            }
        },
        "entity.HostedCheckoutWithMerchantResponseDTO": {
            "description": "Response containing hosted checkout information and merchant details for the checkout page",
            "type": "object",
            "properties": {
                "accept_tip": {
                    "type": "boolean"
                },
                "amount": {
                    "description": "Payment details",
                    "type": "number",
                    "example": 1000.5
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-05-03T10:00:00Z"
                },
                "currency": {
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-05-04T10:00:00Z"
                },
                "failed_url": {
                    "type": "string",
                    "example": "https://example.com/failed"
                },
                "id": {
                    "description": "Unique identifier for the hosted checkout",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "merchant": {
                    "description": "Merchant information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.Merchant"
                        }
                    ]
                },
                "merchant_pays_fee": {
                    "description": "Indicates who should pay the fee (true for merchant, false for customer)\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "phone_number": {
                    "description": "Optional pre-filled phone number",
                    "type": "string",
                    "example": "251911111111"
                },
                "reference": {
                    "type": "string",
                    "example": "ORDER123456"
                },
                "status": {
                    "description": "Status and timestamps",
                    "type": "string",
                    "example": "PENDING"
                },
                "success_url": {
                    "description": "URLs for redirects",
                    "type": "string",
                    "example": "https://example.com/success"
                },
                "supported_mediums": {
                    "description": "Supported payment mediums",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        " \"TELEBIRR\"",
                        " \"CBE\"]"
                    ]
                }
            }
        },
        "entity.MerchantCommission": {
            "type": "object",
            "properties": {
                "commission_active": {
                    "type": "boolean"
                },
                "commission_cent": {
                    "type": "number"
                },
                "commission_percent": {
                    "type": "number"
                },
                "merchant_id": {
                    "type": "string"
                }
            }
        },
        "entity.MerchantGrowthAnalytics": {
            "description": "Merchant growth analytics and statistics",
            "type": "object",
            "properties": {
                "activated_merchants_this_period": {
                    "type": "integer"
                },
                "active_merchant_growth": {
                    "type": "number"
                },
                "active_merchants": {
                    "type": "integer"
                },
                "deactivated_merchants_this_period": {
                    "type": "integer"
                },
                "growth_data": {
                    "description": "Time series data for charts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.MerchantGrowthDataPoint"
                    }
                },
                "inactive_merchants": {
                    "type": "integer"
                },
                "new_merchants_this_period": {
                    "description": "Period breakdown",
                    "type": "integer"
                },
                "pending_merchants": {
                    "type": "integer"
                },
                "total_merchant_growth": {
                    "description": "Growth rates (percentage change from previous period)",
                    "type": "number"
                },
                "total_merchants": {
                    "description": "Current counts",
                    "type": "integer"
                }
            }
        },
        "entity.MerchantGrowthDataPoint": {
            "type": "object",
            "properties": {
                "active_merchants": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "new_merchants": {
                    "type": "integer"
                },
                "total_merchants": {
                    "type": "integer"
                }
            }
        },
        "entity.OrderResponse": {
            "type": "object",
            "properties": {
                "customer_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.CustomerDetails"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Metadata"
                },
                "order_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderDetails"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderItem"
                    }
                },
                "tracking": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Tracking"
                }
            }
        },
        "entity.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "processing",
                "completed",
                "cancelled",
                "refunded"
            ],
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusProcessing",
                "OrderStatusCompleted",
                "OrderStatusCancelled",
                "OrderStatusRefunded"
            ]
        },
        "entity.OrdersResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.OrderResponse"
                    }
                }
            }
        },
        "entity.PaymentMethodResponse": {
            "type": "object",
            "properties": {
                "commission": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "entity.PaymentMethodsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "payment_methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PaymentMethodResponse"
                    }
                }
            }
        },
        "entity.PaymentResponse": {
            "description": "Response containing payment processing results",
            "type": "object",
            "properties": {
                "socialpay_transaction_id": {
                    "description": "SocialPay transaction ID",
                    "type": "string",
                    "example": "1234567890"
                },
                "merchant_pays_fee": {
                    "description": "MerchantPays fee flag",
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "description": "Human-readable message about the operation",
                    "type": "string",
                    "example": "Payment initiated successfully"
                },
                "payment_url": {
                    "description": "URL to redirect the user for payment (if applicable)",
                    "type": "string",
                    "example": "https://pay.example.com/checkout"
                },
                "reference_id": {
                    "description": "Unique payment reference",
                    "type": "string",
                    "example": "PAY123456789"
                },
                "status": {
                    "description": "Status of the payment",
                    "type": "string",
                    "example": "PENDING"
                },
                "success": {
                    "description": "Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "entity.PaymentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "paid",
                "failed",
                "refunded",
                "partially_paid"
            ],
            "x-enum-varnames": [
                "PaymentStatusPending",
                "PaymentStatusPaid",
                "PaymentStatusFailed",
                "PaymentStatusRefunded",
                "PaymentStatusPartiallyPaid"
            ]
        },
        "entity.PeriodComparison": {
            "type": "object",
            "properties": {
                "amount_change": {
                    "type": "number"
                },
                "merchant_net_change": {
                    "type": "number"
                },
                "transaction_count_change": {
                    "type": "number"
                }
            }
        },
        "entity.ProductResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dimensions": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.ProductStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "entity.ProductStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "draft",
                "archived"
            ],
            "x-enum-varnames": [
                "ProductStatusActive",
                "ProductStatusInactive",
                "ProductStatusDraft",
                "ProductStatusArchived"
            ]
        },
        "entity.ProductsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.ProductResponse"
                    }
                }
            }
        },
        "entity.QRLinkResponse": {
            "description": "Response containing QR link details",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Only for STATIC type",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_tip_enabled": {
                    "type": "boolean"
                },
                "merchant_id": {
                    "type": "string"
                },
                "payment_url": {
                    "description": "Payment URL for the QR link",
                    "type": "string",
                    "example": "https://checkout.socialpay.co/qr/123e4567-e89b-12d3-a456-426614174000"
                },
                "qr_code_url": {
                    "description": "URL to display QR code",
                    "type": "string",
                    "example": "https://api.socialpay.co/qr/display/123e4567-e89b-12d3-a456-426614174000"
                },
                "supported_methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "tag": {
                    "$ref": "#/definitions/entity.QRLinkTag"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/entity.QRLinkType"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "entity.QRLinkTag": {
            "type": "string",
            "enum": [
                "RESTAURANT",
                "DONATION",
                "SHOP"
            ],
            "x-enum-varnames": [
                "RESTAURANT",
                "DONATION",
                "SHOP"
            ]
        },
        "entity.QRLinkType": {
            "type": "string",
            "enum": [
                "DYNAMIC",
                "STATIC"
            ],
            "x-enum-varnames": [
                "DYNAMIC",
                "STATIC"
            ]
        },
        "entity.QRLinksListResponse": {
            "description": "Paginated list of QR links",
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "qr_links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.QRLinkResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "entity.QRMerchantPaymentRequest": {
            "description": "QR Payment request details for processing a payment from checkout",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "currency": {
                    "description": "Optional: Three-letter currency code (defaults to ETB)\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Optional: Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "medium": {
                    "description": "Payment medium/provider to use\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "merchant_id": {
                    "description": "Merchant ID\n@Example 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "phone_number": {
                    "description": "Optional: Phone number to be paid\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "reference": {
                    "description": "Optional: Client-provided reference\n@Example ORDER123456",
                    "type": "string",
                    "example": "ORDER123456"
                }
            }
        },
        "entity.QRPaymentRequest": {
            "description": "Request to make a payment using a QR link",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount for DYNAMIC QR links (ignored for STATIC)",
                    "type": "number",
                    "example": 50
                },
                "medium": {
                    "description": "Payment method/provider",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "merchant_pays_fee": {
                    "description": "MerchantPaysFee indicates if the merchant pays the transaction fee",
                    "type": "boolean",
                    "example": false
                },
                "phone_number": {
                    "description": "Payer's phone number",
                    "type": "string",
                    "example": "251911234567"
                },
                "tip_amount": {
                    "description": "Optional tip amount",
                    "type": "number",
                    "example": 5
                },
                "tip_medium": {
                    "description": "Tip payment method (required if tip amount \u003e 0)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "TELEBIRR"
                },
                "tipee_phone": {
                    "description": "Tipee phone number (required if tip amount \u003e 0)",
                    "type": "string",
                    "example": "251911234568"
                }
            }
        },
        "entity.SupportedFileType": {
            "type": "string",
            "enum": [
                "csv",
                "xlsx",
                "json"
            ],
            "x-enum-varnames": [
                "CSV",
                "XLSX",
                "JSON"
            ]
        },
        "entity.TransactionAnalytics": {
            "description": "Aggregated transaction analytics data",
            "type": "object",
            "properties": {
                "period_comparison": {
                    "description": "Period comparison (percentage change from previous period)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PeriodComparison"
                        }
                    ]
                },
                "total_amount": {
                    "type": "number"
                },
                "total_deposits": {
                    "description": "Transaction type breakdown",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                        }
                    ]
                },
                "total_merchant_net": {
                    "description": "Financial breakdown",
                    "type": "number"
                },
                "total_tips": {
                    "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                },
                "total_transactions": {
                    "description": "Transaction counts and amounts",
                    "type": "integer"
                },
                "total_withdrawals": {
                    "$ref": "#/definitions/entity.TransactionTypeAnalytics"
                }
            }
        },
        "entity.TransactionDetails": {
            "description": "Additional details specific to the transaction",
            "type": "object",
            "properties": {
                "item_description": {
                    "description": "Item description",
                    "type": "string",
                    "example": "Item description"
                },
                "item_id": {
                    "description": "Item price",
                    "type": "string",
                    "example": "1234567890"
                },
                "item_name": {
                    "description": "Item name",
                    "type": "string",
                    "example": "Item name"
                },
                "item_quantity": {
                    "description": "Item quantity",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "entity.TransactionRedirects": {
            "description": "URLs for redirecting users after payment",
            "type": "object",
            "properties": {
                "failed": {
                    "description": "URL to redirect on failed payment",
                    "type": "string",
                    "example": "https://example.com/failed"
                },
                "success": {
                    "description": "URL to redirect on successful payment",
                    "type": "string",
                    "example": "https://example.com/success"
                }
            }
        },
        "entity.TransactionResponseDTO": {
            "description": "API response containing transaction information",
            "type": "object",
            "properties": {
                "admin_net": {
                    "description": "Admin net amount",
                    "type": "number",
                    "example": 5
                },
                "amount": {
                    "description": "Transaction amount",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "Callback URL",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "comment": {
                    "description": "Additional comment",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "created_at": {
                    "description": "Creation timestamp",
                    "type": "string",
                    "example": "2024-05-03T10:00:00Z"
                },
                "currency": {
                    "description": "Currency code",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Transaction description",
                    "type": "string",
                    "example": "Payment for service"
                },
                "details": {
                    "description": "Additional transaction details"
                },
                "failed_url": {
                    "description": "Failed redirect URL",
                    "type": "string",
                    "example": "https://example.com/failed"
                },
                "fee_amount": {
                    "description": "Fee amount",
                    "type": "number",
                    "example": 10
                },
                "id": {
                    "description": "Unique identifier for the transaction",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "medium": {
                    "description": "Payment medium used",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "merchant": {
                    "description": "Merchant information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.Merchant"
                        }
                    ]
                },
                "merchant_id": {
                    "description": "Merchant ID",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "merchant_net": {
                    "description": "Merchant net amount",
                    "type": "number",
                    "example": 970.5
                },
                "phone_number": {
                    "description": "Phone number of the payer",
                    "type": "string",
                    "example": "+251911234567"
                },
                "reference": {
                    "description": "Reference code",
                    "type": "string",
                    "example": "REF123456"
                },
                "reference_number": {
                    "description": "Reference number",
                    "type": "string",
                    "example": "TXN123456"
                },
                "status": {
                    "description": "Current status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus"
                        }
                    ],
                    "example": "SUCCESS"
                },
                "success_url": {
                    "description": "Success redirect URL",
                    "type": "string",
                    "example": "https://example.com/success"
                },
                "test": {
                    "description": "Whether this is a test transaction",
                    "type": "boolean",
                    "example": false
                },
                "token": {
                    "description": "Security token",
                    "type": "string",
                    "example": "tok_123456"
                },
                "total_amount": {
                    "description": "Total amount",
                    "type": "number",
                    "example": 1000.5
                },
                "type": {
                    "description": "Type of transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType"
                        }
                    ],
                    "example": "SALE"
                },
                "updated_at": {
                    "description": "Last update timestamp",
                    "type": "string",
                    "example": "2024-05-03T10:01:00Z"
                },
                "user_id": {
                    "description": "User ID associated with the transaction",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "vat_amount": {
                    "description": "VAT amount",
                    "type": "number",
                    "example": 15
                },
                "verified": {
                    "description": "Whether the transaction is verified",
                    "type": "boolean",
                    "example": true
                },
                "webhook_received": {
                    "description": "webhook_received",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "entity.TransactionSource": {
            "description": "Source of the transaction (e.g., DIRECT, QR_PAYMENT)",
            "type": "string",
            "enum": [
                "DIRECT",
                "HOSTED_CHECKOUT",
                "QR_PAYMENT",
                "WITHDRAWAL"
            ],
            "x-enum-comments": {
                "DIRECT": "Direct API calls",
                "HOSTED_CHECKOUT": "Hosted checkout page",
                "QR_PAYMENT": "QR payment link",
                "WITHDRAWAL_TIP": "Withdrawal/tip transactions"
            },
            "x-enum-varnames": [
                "DIRECT",
                "HOSTED_CHECKOUT",
                "QR_PAYMENT",
                "WITHDRAWAL_TIP"
            ]
        },
        "entity.TransactionTypeAnalytics": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "count": {
                    "type": "integer"
                }
            }
        },
        "entity.UpdateAPIKeyRequest": {
            "type": "object",
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "$ref": "#/definitions/entity.CustomTime"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateCatalogRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "$ref": "#/definitions/types.NullString"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.CatalogStatus"
                }
            }
        },
        "entity.UpdateCustomerRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "loyalty_points": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateHostedCheckoutRequest": {
            "description": "Request for updating hosted checkout details (only allowed when status is PENDING)",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be paid\n@Example 1000.50",
                    "type": "number",
                    "example": 1000.5
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code\n@Example ETB",
                    "type": "string",
                    "example": "ETB"
                },
                "description": {
                    "description": "Description of the payment\n@Example Payment for order #123",
                    "type": "string",
                    "example": "Payment for order #123"
                },
                "expires_at": {
                    "description": "Optional expiry date time in UTC (ISO 8601 format)\n@Example 2024-12-31T23:59:59Z",
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "merchant_pays_fee": {
                    "description": "Indicates who should pay the fee (true for merchant, false for customer)\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "phone_number": {
                    "description": "Optional phone number (can be pre-filled)\n@Example 251911111111",
                    "type": "string",
                    "example": "251911111111"
                },
                "redirects": {
                    "description": "URLs for payment redirects",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.TransactionRedirects"
                        }
                    ]
                },
                "supported_mediums": {
                    "description": "Supported payment mediums\n@Example [\"MPESA\", \"TELEBIRR\", \"CBE\"]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    },
                    "example": [
                        "[\"MPESA\"",
                        " \"TELEBIRR\"",
                        " \"CBE\"]"
                    ]
                }
            }
        },
        "entity.UpdateMerchantBusinessInformationRequest": {
            "type": "object",
            "properties": {
                "business_registration_number": {
                    "type": "string"
                },
                "business_type": {
                    "type": "string"
                },
                "established_date": {
                    "type": "string"
                },
                "industry_category": {
                    "type": "string"
                },
                "is_betting_company": {
                    "type": "boolean"
                },
                "legal_name": {
                    "type": "string"
                },
                "lottery_certificate_number": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.MerchantStatus"
                },
                "tax_identification_number": {
                    "type": "string"
                },
                "trading_name": {
                    "type": "string"
                },
                "website_url": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateMerchantDocumentWithIDRequest": {
            "type": "object",
            "properties": {
                "document_type": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateOrderRequest": {
            "type": "object",
            "properties": {
                "customer_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.CustomerDetails"
                },
                "metadata": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Metadata"
                },
                "order_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderDetails"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderItem"
                    }
                },
                "tracking": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Tracking"
                }
            }
        },
        "entity.UpdatePaymentMethodRequest": {
            "type": "object",
            "properties": {
                "commission": {
                    "type": "number"
                },
                "details": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateProductRequest": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dimensions": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "entity.UpdateQRLinkRequest": {
            "description": "Request to update an existing QR payment link",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount for STATIC type QR links",
                    "type": "number",
                    "example": 150.75
                },
                "description": {
                    "description": "Description",
                    "type": "string",
                    "example": "Updated payment description"
                },
                "image_url": {
                    "description": "Image URL",
                    "type": "string",
                    "example": "https://example.com/new-image.jpg"
                },
                "is_active": {
                    "description": "Whether QR link is active",
                    "type": "boolean",
                    "example": true
                },
                "is_tip_enabled": {
                    "description": "Whether tipping is enabled",
                    "type": "boolean",
                    "example": false
                },
                "supported_methods": {
                    "description": "Supported payment methods",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                    }
                },
                "tag": {
                    "description": "QR link category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.QRLinkTag"
                        }
                    ],
                    "example": "RESTAURANT"
                },
                "title": {
                    "description": "Title",
                    "type": "string",
                    "example": "Updated Shop Payment"
                }
            }
        },
        "entity.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "password_hint": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "phone_prefix": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "entity.UpdateWarehouseRequest": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.WarehouseResponse": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.WarehouseStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "entity.WarehouseStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive"
            ],
            "x-enum-varnames": [
                "WarehouseStatusActive",
                "WarehouseStatusInactive"
            ]
        },
        "entity.WarehousesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "warehouses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.WarehouseResponse"
                    }
                }
            }
        },
        "entity.WithdrawalRequest": {
            "description": "Withdrawal request details",
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to withdraw",
                    "type": "number",
                    "example": 500
                },
                "callback_url": {
                    "description": "URL to receive payment status updates\n@Example https://example.com/callback",
                    "type": "string",
                    "example": "https://example.com/callback"
                },
                "currency": {
                    "description": "Three-letter currency code",
                    "type": "string",
                    "example": "ETB"
                },
                "medium": {
                    "description": "Payment medium/provider to use\n@Example MPESA",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium"
                        }
                    ],
                    "example": "MPESA"
                },
                "merchant_pays_fee": {
                    "description": "MerchantPays fee flag\nIndicates who should pay the fee (true for merchant, false for customer)",
                    "type": "boolean",
                    "example": false
                },
                "phone_number": {
                    "description": "Bank account number",
                    "type": "string",
                    "example": "1234567890"
                },
                "reference": {
                    "description": "Client-provided reference",
                    "type": "string",
                    "example": "WD123456789"
                }
            }
        },
        "gin.AddMerchantRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "phone_number",
                "phone_prefix",
                "title"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "password_hint": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "phone_prefix": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "gin.AdminLoginRequest": {
            "type": "object",
            "required": [
                "password",
                "phone_number",
                "phone_prefix"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "phone_prefix": {
                    "type": "string"
                }
            }
        },
        "gin.AwashCallback": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "dateApproved": {
                    "type": "string"
                },
                "dateRequested": {
                    "type": "string"
                },
                "externalReference": {
                    "type": "string"
                },
                "payerPhone": {
                    "type": "string"
                },
                "returnCode": {
                    "type": "integer"
                },
                "returnMessage": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                }
            }
        },
        "gin.CreateGroupRequest": {
            "type": "object",
            "required": [
                "description",
                "permissions",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CreatePermissionRequest"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "gin.DeleteMerchantsRequest": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "gin.EthSwitchCallback": {
            "type": "object",
            "properties": {
                "mdOrder": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "orderNumber": {
                    "type": "string"
                },
                "paymentWay": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "gin.ExportMerchantsRequest": {
            "type": "object",
            "required": [
                "data",
                "fileType",
                "merchants"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fileType": {
                    "$ref": "#/definitions/entity.SupportedFileType"
                },
                "merchants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "gin.ImpersonateMerchantRequest": {
            "type": "object",
            "properties": {
                "merchant_id": {
                    "type": "string"
                }
            }
        },
        "gin.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "phone_number",
                "phone_prefix"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "phone_prefix": {
                    "type": "string"
                }
            }
        },
        "gin.MPESACallback": {
            "type": "object",
            "required": [
                "status",
                "transaction_id"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Payment successful"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1"
                    ],
                    "example": "0"
                },
                "transaction_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "gin.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "gin.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "gin.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "phone_number",
                "phone_prefix",
                "title"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "password_hint": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "phone_prefix": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "gin.RequestOTPRequest": {
            "type": "object",
            "required": [
                "phone_number",
                "phone_prefix"
            ],
            "properties": {
                "phone_number": {
                    "type": "string"
                },
                "phone_prefix": {
                    "type": "string"
                }
            }
        },
        "gin.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "otp_token"
            ],
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "otp_token": {
                    "type": "string"
                }
            }
        },
        "gin.SettlementResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Settlement processed successfully"
                }
            }
        },
        "gin.TelebirrCallback": {
            "type": "object",
            "required": [
                "status",
                "transaction_id"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Payment successful"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1"
                    ],
                    "example": "0"
                },
                "transaction_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "gin.UpdateAdminMerchantRequest": {
            "type": "object",
            "properties": {
                "business_info": {
                    "$ref": "#/definitions/entity.UpdateMerchantBusinessInformationRequest"
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.UpdateMerchantDocumentWithIDRequest"
                    }
                },
                "personal_info": {
                    "$ref": "#/definitions/entity.CreateMerchantPersonalInformationRequest"
                }
            }
        },
        "gin.UpdateGroupRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CreatePermissionRequest"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "gin.UpdateMerchantContactRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "gin.UpdateMerchantDocumentRequest": {
            "type": "object",
            "properties": {
                "file_url": {
                    "type": "string"
                },
                "rejection_reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "gin.UpdateMerchantRequest": {
            "type": "object",
            "properties": {
                "business_info": {
                    "$ref": "#/definitions/entity.UpdateMerchantBusinessInformationRequest"
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CreateMerchantDocumnetRequest"
                    }
                },
                "personal_info": {
                    "$ref": "#/definitions/entity.CreateMerchantPersonalInformationRequest"
                }
            }
        },
        "gin.UpdateMerchantStatusRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "gin.UpdateTeamMemberRequest": {
            "type": "object",
            "required": [
                "group_id",
                "user_data"
            ],
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "user_data": {
                    "$ref": "#/definitions/entity.UpdateUserRequest"
                }
            }
        },
        "gin.VerifyOTPRequest": {
            "type": "object",
            "required": [
                "otp_code",
                "otp_token"
            ],
            "properties": {
                "otp_code": {
                    "type": "string"
                },
                "otp_token": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_adapter_controller_gin.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_apikey_mgmt_core_entity.APIKey": {
            "type": "object",
            "properties": {
                "can_process_payment": {
                    "type": "boolean"
                },
                "can_withdrawal": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_used_at": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_adapter_controller_gin.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Catalog": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "$ref": "#/definitions/types.NullString"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.CatalogStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Customer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "loyalty_points": {
                    "type": "integer"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.CustomerStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.CustomerDetails": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "sir_name": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Discount": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Metadata": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "customer_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.CustomerDetails"
                },
                "id": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Metadata"
                },
                "order_details": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderDetails"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderItem"
                    }
                },
                "tracking": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Tracking"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderDetails": {
            "type": "object",
            "properties": {
                "billing_address": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Discount"
                    }
                },
                "final_amount": {
                    "type": "number"
                },
                "medium": {
                    "type": "string"
                },
                "order_type_id": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string"
                },
                "payment_reference": {
                    "type": "string"
                },
                "payment_status": {
                    "$ref": "#/definitions/entity.PaymentStatus"
                },
                "shipping_address": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.OrderStatus"
                },
                "taxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Tax"
                    }
                },
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.OrderItem": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "sku": {
                    "type": "string"
                },
                "total_price": {
                    "type": "number"
                },
                "unit_price": {
                    "type": "number"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.PaymentMethod": {
            "type": "object",
            "properties": {
                "commission": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Product": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dimensions": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.ProductStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Tax": {
            "type": "object",
            "properties": {
                "rate": {
                    "type": "number"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Tracking": {
            "type": "object",
            "properties": {
                "expected_delivery_date": {
                    "type": "string"
                },
                "shipment_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_erp_v2_core_entity.Warehouse": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "merchant_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.WarehouseStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_socialpayapi_adapter_controller_gin.ErrorResponse": {
            "description": "Error response with a message",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_socialpayapi_core_entity.QRPaymentResponse": {
            "description": "Response containing QR payment processing results",
            "type": "object",
            "properties": {
                "socialpay_transaction_id": {
                    "description": "SocialPay transaction ID",
                    "type": "string",
                    "example": "1234567890"
                },
                "message": {
                    "description": "Human-readable message about the operation",
                    "type": "string",
                    "example": "Payment initiated successfully"
                },
                "payment_url": {
                    "description": "URL to redirect the user for payment (if applicable)",
                    "type": "string",
                    "example": "https://pay.example.com/checkout"
                },
                "reference_id": {
                    "description": "Unique payment reference",
                    "type": "string",
                    "example": "PAY123456789"
                },
                "status": {
                    "description": "Status of the payment",
                    "type": "string",
                    "example": "PENDING"
                },
                "success": {
                    "description": "Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_qr_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_rbac_adapter_controller_gin.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_shared_payment_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid transaction ID format"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_team_member_adapter_controller_gin.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionMedium": {
            "description": "Payment medium or provider (e.g., MPESA, TELEBIRR)",
            "type": "string",
            "enum": [
                "SOCIALPAY",
                "CYBERSOURCE",
                "ETHSWITCH",
                "MPESA",
                "TELEBIRR",
                "CBE",
                "AWASH",
                "KACHA"
            ],
            "x-enum-varnames": [
                "SOCIALPAY",
                "CYBERSOURCE",
                "ETHSWITCH",
                "MPESA",
                "TELEBIRR",
                "CBE",
                "AWASH",
                "KACHA"
            ]
        },
        "github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionStatus": {
            "description": "Current status of the transaction",
            "type": "string",
            "enum": [
                "INITIATED",
                "PENDING",
                "SUCCESS",
                "FAILED",
                "REFUNDED",
                "EXPIRED",
                "CANCELED"
            ],
            "x-enum-varnames": [
                "INITIATED",
                "PENDING",
                "SUCCESS",
                "FAILED",
                "REFUNDED",
                "EXPIRED",
                "CANCELED"
            ]
        },
        "github_com_socialpay_socialpay_src_pkg_transaction_core_entity.TransactionType": {
            "description": "Type of transaction (e.g., SALE, WITHDRAWAL)",
            "type": "string",
            "enum": [
                "REPLENISHMENT",
                "P2P",
                "SALE",
                "BILL_PAYMENT",
                "SETTLEMENT",
                "BILL_AIRTIME",
                "DEPOSIT",
                "WITHDRAWAL",
                "REFUND"
            ],
            "x-enum-varnames": [
                "REPLENISHMENT",
                "P2P",
                "SALE",
                "BILL_PAYMENT",
                "SETTLEMENT",
                "BILL",
                "DEPOSIT",
                "WITHDRAWAL",
                "REFUND"
            ]
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_adapter_controller_gin.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.Merchant": {
            "type": "object",
            "properties": {
                "businessRegistrationNumber": {
                    "type": "string"
                },
                "businessType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "establishedDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "industryCategory": {
                    "type": "string"
                },
                "isBettingCompany": {
                    "type": "boolean"
                },
                "legalName": {
                    "type": "string"
                },
                "lotteryCertificateNumber": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.MerchantStatus"
                },
                "taxIdentificationNumber": {
                    "type": "string"
                },
                "tradingName": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "websiteUrl": {
                    "type": "string"
                }
            }
        },
        "github_com_socialpay_socialpay_src_pkg_v2_merchant_core_entity.MerchantStatus": {
            "type": "string",
            "enum": [
                "pending_verification",
                "active",
                "inactive",
                "suspended",
                "terminated"
            ],
            "x-enum-varnames": [
                "StatusPendingVerification",
                "StatusActive",
                "StatusInactive",
                "StatusSuspended",
                "StatusTerminated"
            ]
        },
        "pagination.PaginationInfo": {
            "type": "object",
            "required": [
                "page",
                "page_size"
            ],
            "properties": {
                "has_next_page": {
                    "type": "boolean"
                },
                "has_pervious": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer",
                    "minimum": 1
                },
                "page_size": {
                    "type": "integer",
                    "maximum": 20,
                    "minimum": 1
                },
                "total_items": {
                    "type": "integer"
                },
                "total_page": {
                    "type": "integer"
                }
            }
        },
        "payment.STDCallbackRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "providerData": {
                    "type": "string"
                },
                "providerTxId": {
                    "type": "string"
                },
                "referenceId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.ApiError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/response.ApiError"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "pagination": {
                    "$ref": "#/definitions/pagination.PaginationInfo"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "types.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string",
                    "example": "sample description"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key authentication for API key management endpoints",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "BearerAuth": {
            "description": "Bearer token authentication for protected endpoints. Use format: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "MerchantID": {
            "description": "Merchant ID authentication for merchant endpoints",
            "type": "apiKey",
            "name": "X-MERCHANT-ID",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}